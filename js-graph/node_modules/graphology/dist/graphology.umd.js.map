{"version":3,"file":"graphology.umd.js","sources":["../src/utils.js","../node_modules/events/events.js","../node_modules/obliterator/iterator.js","../node_modules/obliterator/take.js","../src/errors.js","../src/data.js","../src/indices.js","../src/attributes.js","../node_modules/obliterator/chain.js","../src/iteration/edges.js","../src/iteration/neighbors.js","../src/iteration/adjacency.js","../src/serialization.js","../src/graph.js","../src/classes.js","../src/endpoint.cjs.js"],"sourcesContent":["/**\n * Graphology Utilities\n * =====================\n *\n * Collection of helpful functions used by the implementation.\n */\n\n/**\n * Object.assign-like polyfill.\n *\n * @param  {object} target       - First object.\n * @param  {object} [...objects] - Objects to merge.\n * @return {object}\n */\nfunction assignPolyfill() {\n  const target = arguments[0];\n\n  for (let i = 1, l = arguments.length; i < l; i++) {\n    if (!arguments[i])\n      continue;\n\n    for (const k in arguments[i])\n      target[k] = arguments[i][k];\n  }\n\n  return target;\n}\n\nlet assign = assignPolyfill;\n\nif (typeof Object.assign === 'function')\n  assign = Object.assign;\n\nexport {assign};\n\n/**\n * Function returning the first matching edge for given path.\n * Note: this function does not check the existence of source & target. This\n * must be performed by the caller.\n *\n * @param  {Graph}  graph  - Target graph.\n * @param  {any}    source - Source node.\n * @param  {any}    target - Target node.\n * @param  {string} type   - Type of the edge (mixed, directed or undirected).\n * @return {string|null}\n */\nexport function getMatchingEdge(graph, source, target, type) {\n  const sourceData = graph._nodes.get(source);\n\n  let edge = null;\n\n  if (!sourceData)\n    return edge;\n\n  if (type === 'mixed') {\n    edge = (\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target])\n    );\n  }\n  else if (type === 'directed') {\n    edge = sourceData.out && sourceData.out[target];\n  }\n  else {\n    edge = sourceData.undirected && sourceData.undirected[target];\n  }\n\n  return edge;\n}\n\n/**\n * Checks whether the given value is a Graph implementation instance.\n *\n * @param  {mixed}   value - Target value.\n * @return {boolean}\n */\nexport function isGraph(value) {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.addUndirectedEdgeWithKey === 'function' &&\n    typeof value.dropNode === 'function'\n  );\n}\n\n/**\n * Checks whether the given value is a plain object.\n *\n * @param  {mixed}   value - Target value.\n * @return {boolean}\n */\nexport function isPlainObject(value) {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    value.constructor === Object\n  );\n}\n\n/**\n * Checks whether the given object is empty.\n *\n * @param  {object}  o - Target Object.\n * @return {boolean}\n */\nexport function isEmpty(o) {\n  let k;\n\n  for (k in o)\n    return false;\n\n  return true;\n}\n\n/**\n * Creates a \"private\" property for the given member name by concealing it\n * using the `enumerable` option.\n *\n * @param {object} target - Target object.\n * @param {string} name   - Member name.\n */\nexport function privateProperty(target, name, value) {\n  Object.defineProperty(target, name, {\n    enumerable: false,\n    configurable: false,\n    writable: true,\n    value\n  });\n}\n\n\n/**\n * Creates a read-only property for the given member name & the given getter.\n *\n * @param {object}   target - Target object.\n * @param {string}   name   - Member name.\n * @param {mixed}    value  - The attached getter or fixed value.\n */\nexport function readOnlyProperty(target, name, value) {\n  const descriptor = {\n    enumerable: true,\n    configurable: true\n  };\n\n  if (typeof value === 'function') {\n    descriptor.get = value;\n  }\n  else {\n    descriptor.value = value;\n    descriptor.writable = false;\n  }\n\n  Object.defineProperty(target, name, descriptor);\n}\n\n/**\n * Returns whether the given object constitute valid hints.\n *\n * @param {object} hints - Target object.\n */\nexport function validateHints(hints) {\n  if (!isPlainObject(hints))\n    return false;\n\n  if (hints.attributes && !Array.isArray(hints.attributes))\n    return false;\n\n  return true;\n}\n\n/**\n * Creates a function generating incremental ids for edges.\n *\n * @return {function}\n */\nexport function incrementalId() {\n  let i = 0;\n\n  return () => {\n    return `_geid${i++}_`;\n  };\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function eventListener() {\n      if (errorListener !== undefined) {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n    var errorListener;\n\n    // Adding an error listener is not optional because\n    // if an error is thrown on an event emitter we cannot\n    // guarantee that the actual event we are waiting will\n    // be fired. The result could be a silent way to create\n    // memory or file descriptor leaks, which is something\n    // we should avoid.\n    if (name !== 'error') {\n      errorListener = function errorListener(err) {\n        emitter.removeListener(name, eventListener);\n        reject(err);\n      };\n\n      emitter.once('error', errorListener);\n    }\n\n    emitter.once(name, eventListener);\n  });\n}\n","/**\n * Obliterator Iterator Class\n * ===========================\n *\n * Simple class representing the library's iterators.\n */\n\n/**\n * Iterator class.\n *\n * @constructor\n * @param {function} next - Next function.\n */\nfunction Iterator(next) {\n\n  // Hiding the given function\n  Object.defineProperty(this, '_next', {\n    writable: false,\n    enumerable: false,\n    value: next\n  });\n\n  // Is the iterator complete?\n  this.done = false;\n}\n\n/**\n * Next function.\n *\n * @return {object}\n */\n// NOTE: maybe this should dropped for performance?\nIterator.prototype.next = function() {\n  if (this.done)\n    return {done: true};\n\n  var step = this._next();\n\n  if (step.done)\n    this.done = true;\n\n  return step;\n};\n\n/**\n * If symbols are supported, we add `next` to `Symbol.iterator`.\n */\nif (typeof Symbol !== 'undefined')\n  Iterator.prototype[Symbol.iterator] = function() {\n    return this;\n  };\n\n/**\n * Returning an iterator of the given values.\n *\n * @param  {any...} values - Values.\n * @return {Iterator}\n */\nIterator.of = function() {\n  var args = arguments,\n      l = args.length,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {done: true};\n\n    return {done: false, value: args[i++]};\n  });\n};\n\n/**\n * Returning an empty iterator.\n *\n * @return {Iterator}\n */\nIterator.empty = function() {\n  var iterator = new Iterator(null);\n  iterator.done = true;\n\n  return iterator;\n};\n\n/**\n * Returning whether the given value is an iterator.\n *\n * @param  {any} value - Value.\n * @return {boolean}\n */\nIterator.is = function(value) {\n  if (value instanceof Iterator)\n    return true;\n\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.next === 'function'\n  );\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Iterator;\n","/* eslint no-constant-condition: 0 */\n/**\n * Obliterator Take Function\n * ==========================\n *\n * Function taking n or every value of the given iterator and returns them\n * into an array.\n */\n\n/**\n * Take.\n *\n * @param  {Iterator} iterator - Target iterator.\n * @param  {number}   [n]      - Optional number of items to take.\n * @return {array}\n */\nmodule.exports = function take(iterator, n) {\n  var l = arguments.length > 1 ? n : Infinity,\n      array = l !== Infinity ? new Array(l) : [],\n      step,\n      i = 0;\n\n  while (true) {\n\n    if (i === l)\n      return array;\n\n    step = iterator.next();\n\n    if (step.done) {\n\n      if (i !== n)\n        return array.slice(0, i);\n\n      return array;\n    }\n\n    array[i++] = step.value;\n  }\n};\n","/**\n * Graphology Custom Errors\n * =========================\n *\n * Defining custom errors for ease of use & easy unit tests across\n * implementations (normalized typology rather than relying on error\n * messages to check whether the correct error was found).\n */\nexport class GraphError extends Error {\n  constructor(message, data) {\n    super();\n    this.name = 'GraphError';\n    this.message = message || '';\n    this.data = data || {};\n  }\n}\n\nexport class InvalidArgumentsGraphError extends GraphError {\n  constructor(message, data) {\n    super(message, data);\n    this.name = 'InvalidArgumentsGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, InvalidArgumentsGraphError.prototype.constructor);\n  }\n}\n\nexport class NotFoundGraphError extends GraphError {\n  constructor(message, data) {\n    super(message, data);\n    this.name = 'NotFoundGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, NotFoundGraphError.prototype.constructor);\n  }\n}\n\nexport class UsageGraphError extends GraphError {\n  constructor(message, data) {\n    super(message, data);\n    this.name = 'UsageGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, UsageGraphError.prototype.constructor);\n  }\n}\n","/**\n * Graphology Internal Data Classes\n * =================================\n *\n * Internal classes hopefully reduced to structs by engines & storing\n * necessary information for nodes & edges.\n *\n * Note that those classes don't rely on the `class` keyword to avoid some\n * cruft introduced by most of ES2015 transpilers.\n */\n\n/**\n * MixedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function MixedNodeData(key, attributes) {\n\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.undirectedDegree = 0;\n  this.directedSelfLoops = 0;\n  this.undirectedSelfLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n  this.undirected = {};\n}\n\n/**\n * DirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function DirectedNodeData(key, attributes) {\n\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.directedSelfLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n}\n\nDirectedNodeData.prototype.upgradeToMixed = function() {\n\n  // Degrees\n  this.undirectedDegree = 0;\n  this.undirectedSelfLoops = 0;\n\n  // Indices\n  this.undirected = {};\n};\n\n\n/**\n * UndirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function UndirectedNodeData(key, attributes) {\n\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  // Degrees\n  this.undirectedDegree = 0;\n  this.undirectedSelfLoops = 0;\n\n  // Indices\n  this.undirected = {};\n}\n\nUndirectedNodeData.prototype.upgradeToMixed = function() {\n\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.directedSelfLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n};\n\n/**\n * EdgeData class.\n *\n * @constructor\n * @param {boolean} undirected   - Whether the edge is undirected.\n * @param {string}  string       - The edge's key.\n * @param {boolean} generatedKey - Was its key generated?\n * @param {string}  source       - Source of the edge.\n * @param {string}  target       - Target of the edge.\n * @param {object}  attributes   - Edge's attributes.\n */\nexport function EdgeData(undirected, key, generatedKey, source, target, attributes) {\n\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n  this.undirected = undirected;\n\n  // Extremities\n  this.source = source;\n  this.target = target;\n\n  // Was its key generated?\n  this.generatedKey = generatedKey;\n}\n","/**\n * Graphology Indexes Functions\n * =============================\n *\n * Bunch of functions used to compute or clear indexes.\n */\n\n/**\n * Function updating the 'structure' index with the given edge's data.\n * Note that in the case of the multi graph, related edges are stored in a\n * set that is the same for A -> B & B <- A.\n *\n * @param {Graph}    graph      - Target Graph instance.\n * @param {EdgeData} edgeData   - Added edge's data.\n * @param {NodeData} sourceData - Source node's data.\n * @param {NodeData} targetData - Target node's data.\n */\nexport function updateStructureIndex(\n  graph,\n  undirected,\n  edgeData,\n  source,\n  target,\n  sourceData,\n  targetData\n) {\n  const multi = graph.multi;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (undirected)\n    outKey = inKey = 'undirected';\n\n  let adj, container;\n\n  if (multi) {\n\n      // Handling source\n    adj = sourceData[outKey];\n    container = adj[target];\n\n    if (typeof container === 'undefined') {\n      container = new Set();\n      adj[target] = container;\n    }\n\n    container.add(edgeData);\n\n    // If selfLoop, we break here\n    if (source === target && undirected)\n      return;\n\n    // Handling target (we won't add the edge because it was already taken\n    // care of with source above)\n    adj = targetData[inKey];\n    if (typeof adj[source] === 'undefined')\n      adj[source] = container;\n  }\n  else {\n\n      // Handling source\n      sourceData[outKey][target] = edgeData;\n\n      // If selfLoop, we break here\n      if (source === target && undirected)\n        return;\n\n      // Handling target\n      targetData[inKey][source] = edgeData;\n  }\n}\n\n/**\n * Function clearing the 'structure' index data related to the given edge.\n *\n * @param {Graph}    graph    - Target Graph instance.\n * @param {EdgeData} edgeData - Dropped edge's data.\n */\nexport function clearEdgeFromStructureIndex(graph, undirected, edgeData) {\n  const multi = graph.multi;\n\n  const {source: sourceData, target: targetData} = edgeData;\n\n  const source = sourceData.key,\n        target = targetData.key;\n\n  // NOTE: since the edge set is the same for source & target, we can only\n  // affect source\n  const outKey = undirected ? 'undirected' : 'out',\n        sourceIndex = sourceData[outKey];\n\n  const inKey = undirected ? 'undirected' : 'in';\n\n  if (target in sourceIndex) {\n\n    if (multi) {\n      const set = sourceIndex[target];\n\n      if (set.size === 1) {\n        delete sourceIndex[target];\n        delete targetData[inKey][source];\n      }\n      else {\n        set.delete(edgeData);\n      }\n    }\n    else\n      delete sourceIndex[target];\n  }\n\n  if (multi)\n    return;\n\n  const targetIndex = targetData[inKey];\n\n  delete targetIndex[source];\n}\n\n/**\n * Function clearing the whole 'structure' index.\n *\n * @param {Graph} graph - Target Graph instance.\n */\nexport function clearStructureIndex(graph) {\n  graph._nodes.forEach(data => {\n\n    // Clearing now useless properties\n    if (typeof data.in !== 'undefined') {\n      data.in = {};\n      data.out = {};\n    }\n\n    if (typeof data.undirected !== 'undefined') {\n      data.undirected = {};\n    }\n  });\n}\n\n/**\n * Function used to upgrade a simple `structure` index to a multi on.\n *\n * @param {Graph}  graph - Target Graph instance.\n */\nexport function upgradeStructureIndexToMulti(graph) {\n  graph._nodes.forEach((data, node) => {\n\n    // Directed\n    if (data.out) {\n\n      for (const neighbor in data.out) {\n        const edges = new Set();\n        edges.add(data.out[neighbor]);\n        data.out[neighbor] = edges;\n        graph._nodes.get(neighbor).in[node] = edges;\n      }\n    }\n\n    // Undirected\n    if (data.undirected) {\n      for (const neighbor in data.undirected) {\n        if (neighbor > node)\n          continue;\n\n        const edges = new Set();\n        edges.add(data.undirected[neighbor]);\n        data.undirected[neighbor] = edges;\n        graph._nodes.get(neighbor).undirected[node] = edges;\n      }\n    }\n  });\n}\n","/**\n * Graphology Attributes methods\n * ==============================\n *\n * Attributes-related methods being exactly the same for nodes & edges,\n * we abstract them here for factorization reasons.\n */\nimport {\n  assign,\n  isPlainObject,\n  getMatchingEdge\n} from './utils';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\n/**\n * Attach an attribute getter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeGetter(Class, method, type) {\n\n  /**\n   * Get the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {mixed}          - The attribute's value.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function(element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(`Graph.${method}: cannot find this type of edges in your ${this.type} graph.`);\n\n    if (arguments.length > 2) {\n\n      if (this.multi)\n        throw new UsageGraphError(`Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);\n\n      const source = '' + element,\n            target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`);\n    }\n    else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" edge in the graph.`);\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`);\n\n    return data.attributes[name];\n  };\n}\n\n/**\n * Attach an attributes getter method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachAttributesGetter(Class, method, type) {\n\n  /**\n   * Retrieves all the target element's attributes.\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   *\n   * @return {object}          - The element's attributes.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function(element) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(`Graph.${method}: cannot find this type of edges in your ${this.type} graph.`);\n\n    if (arguments.length > 1) {\n\n      if (this.multi)\n        throw new UsageGraphError(`Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);\n\n      const source = '' + element,\n            target = '' + arguments[1];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`);\n    }\n    else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" edge in the graph.`);\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`);\n\n    return data.attributes;\n  };\n}\n\n/**\n * Attach an attribute checker method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachAttributeChecker(Class, method, type) {\n\n  /**\n   * Checks whether the desired attribute is set for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function(element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(`Graph.${method}: cannot find this type of edges in your ${this.type} graph.`);\n\n    if (arguments.length > 2) {\n\n      if (this.multi)\n        throw new UsageGraphError(`Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);\n\n      const source = '' + element,\n            target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`);\n    }\n    else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" edge in the graph.`);\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`);\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\n/**\n * Attach an attribute setter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeSetter(Class, method, type) {\n\n  /**\n   * Set the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function(element, name, value) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(`Graph.${method}: cannot find this type of edges in your ${this.type} graph.`);\n\n    if (arguments.length > 3) {\n\n      if (this.multi)\n        throw new UsageGraphError(`Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);\n\n      const source = '' + element,\n            target = '' + name;\n\n      name = arguments[2];\n      value = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`);\n    }\n    else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" edge in the graph.`);\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`);\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeUpdater(Class, method, type) {\n\n  /**\n   * Update the desired attribute for the given element (node or edge) using\n   * the provided function.\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function(element, name, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(`Graph.${method}: cannot find this type of edges in your ${this.type} graph.`);\n\n    if (arguments.length > 3) {\n\n      if (this.multi)\n        throw new UsageGraphError(`Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);\n\n      const source = '' + element,\n            target = '' + name;\n\n      name = arguments[2];\n      updater = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`);\n    }\n    else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" edge in the graph.`);\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(`Graph.${method}: updater should be a function.`);\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`);\n\n    data.attributes[name] = updater(data.attributes[name]);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute remover method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeRemover(Class, method, type) {\n\n  /**\n   * Remove the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function(element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(`Graph.${method}: cannot find this type of edges in your ${this.type} graph.`);\n\n    if (arguments.length > 2) {\n\n      if (this.multi)\n        throw new UsageGraphError(`Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);\n\n      const source = '' + element,\n            target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`);\n    }\n    else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" edge in the graph.`);\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`);\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute replacer method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributesReplacer(Class, method, type) {\n\n  /**\n   * Replace the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - New attributes.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - New attributes.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function(element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(`Graph.${method}: cannot find this type of edges in your ${this.type} graph.`);\n\n    if (arguments.length > 2) {\n\n      if (this.multi)\n        throw new UsageGraphError(`Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);\n\n      const source = '' + element,\n            target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`);\n    }\n    else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" edge in the graph.`);\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(`Graph.${method}: provided attributes are not a plain object.`);\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`);\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute merger method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributesMerger(Class, method, type) {\n\n  /**\n   * Replace the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - Attributes to merge.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - Attributes to merge.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function(element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(`Graph.${method}: cannot find this type of edges in your ${this.type} graph.`);\n\n    if (arguments.length > 2) {\n\n      if (this.multi)\n        throw new UsageGraphError(`Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);\n\n      const source = '' + element,\n            target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`);\n    }\n    else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" edge in the graph.`);\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(`Graph.${method}: provided attributes are not a plain object.`);\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`);\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachAttributesMerger\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport function attachAttributesMethods(Graph) {\n  ATTRIBUTES_METHODS.forEach(function({name, attacher}) {\n\n    // For edges\n    attacher(\n      Graph,\n      name('Edge'),\n      'mixed'\n    );\n\n    // For directed edges\n    attacher(\n      Graph,\n      name('DirectedEdge'),\n      'directed'\n    );\n\n    // For undirected edges\n    attacher(\n      Graph,\n      name('UndirectedEdge'),\n      'undirected'\n    );\n  });\n}\n","/**\n * Obliterator Chain Function\n * ===========================\n *\n * Variadic function combining the given iterators.\n */\nvar Iterator = require('./iterator.js');\n\n/**\n * Chain.\n *\n * @param  {...Iterator} iterators - Target iterators.\n * @return {Iterator}\n */\nmodule.exports = function chain() {\n  var iterators = arguments,\n      current,\n      i = -1;\n\n  return new Iterator(function iterate() {\n    if (!current) {\n      i++;\n\n      if (i >= iterators.length)\n        return {done: true};\n\n      current = iterators[i];\n    }\n\n    var step = current.next();\n\n    if (step.done) {\n      current = null;\n      return iterate();\n    }\n\n    return step;\n  });\n};\n","/**\n * Graphology Edge Iteration\n * ==========================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's edges.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\nimport take from 'obliterator/take';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError\n} from '../errors';\n\n/**\n * Definitions.\n */\nconst EDGES_ITERATION = [\n  {\n    name: 'edges',\n    type: 'mixed'\n  },\n  {\n    name: 'inEdges',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outEdges',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundEdges',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundEdges',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedEdges',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedEdges',\n    type: 'undirected'\n  }\n];\n\n/**\n * Function collecting edges from the given object.\n *\n * @param  {array}  edges  - Edges array to populate.\n * @param  {object} object - Target object.\n * @return {array}         - The found edges.\n */\nfunction collectSimple(edges, object) {\n  for (const k in object)\n    edges.push(object[k].key);\n}\n\nfunction collectMulti(edges, object) {\n  for (const k in object)\n    object[k].forEach(edgeData => edges.push(edgeData.key));\n}\n\n/**\n * Function iterating over edges from the given object using a callback.\n *\n * @param {object}   object   - Target object.\n * @param {function} callback - Function to call.\n */\nfunction forEachSimple(object, callback, avoid) {\n  for (const k in object) {\n    if (k === avoid)\n      continue;\n\n    const edgeData = object[k];\n\n    callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected,\n      edgeData.generatedKey\n    );\n  }\n}\n\nfunction forEachMulti(object, callback, avoid) {\n  for (const k in object) {\n    if (k === avoid)\n      continue;\n\n    object[k].forEach(edgeData => callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected,\n      edgeData.generatedKey\n    ));\n  }\n}\n\n/**\n * Function iterating over edges from the given object using a callback until\n * the return value of the callback is truthy.\n *\n * @param {object}   object   - Target object.\n * @param {function} callback - Function to call.\n */\nfunction forEachSimpleUntil(object, callback, avoid) {\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid)\n      continue;\n\n    const edgeData = object[k];\n\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected,\n      edgeData.generatedKey\n    );\n\n    if (shouldBreak)\n      return true;\n  }\n\n  return false;\n}\n\nfunction forEachMultiUntil(object, callback, avoid) {\n  let iterator, step, edgeData, source, target;\n\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid)\n      continue;\n\n    iterator = object[k].values();\n\n    while ((step = iterator.next(), step.done !== true)) {\n      edgeData = step.value;\n      source = edgeData.source;\n      target = edgeData.target;\n\n      shouldBreak = callback(\n        edgeData.key,\n        edgeData.attributes,\n        source.key,\n        target.key,\n        source.attributes,\n        target.attributes,\n        edgeData.undirected,\n        edgeData.generatedKey\n      );\n\n      if (shouldBreak)\n        return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Function returning an iterator over edges from the given object.\n *\n * @param  {object}   object - Target object.\n * @return {Iterator}\n */\nfunction createIterator(object, avoid) {\n  const keys = Object.keys(object),\n        l = keys.length;\n\n  let inner = null,\n      i = 0;\n\n  return new Iterator(function next() {\n    let edgeData;\n\n    if (inner) {\n      const step = inner.next();\n\n      if (step.done) {\n        inner = null;\n        i++;\n        return next();\n      }\n\n      edgeData = step.value;\n    }\n    else {\n      if (i >= l)\n        return {done: true};\n\n      const k = keys[i];\n\n      if (k === avoid) {\n        i++;\n        return next();\n      }\n\n      edgeData = object[k];\n\n      if (edgeData instanceof Set) {\n        inner = edgeData.values();\n        return next();\n      }\n\n      i++;\n    }\n\n    return {\n      done: false,\n      value: [\n        edgeData.key,\n        edgeData.attributes,\n        edgeData.source.key,\n        edgeData.target.key,\n        edgeData.source.attributes,\n        edgeData.target.attributes\n      ]\n    };\n  });\n}\n\n/**\n * Function collecting edges from the given object at given key.\n *\n * @param  {array}  edges  - Edges array to populate.\n * @param  {object} object - Target object.\n * @param  {mixed}  k      - Neighbor key.\n * @return {array}         - The found edges.\n */\nfunction collectForKeySimple(edges, object, k) {\n  const edgeData = object[k];\n\n  if (!edgeData)\n    return;\n\n  edges.push(edgeData.key);\n}\n\nfunction collectForKeyMulti(edges, object, k) {\n  const edgesData = object[k];\n\n  if (!edgesData)\n    return;\n\n  edgesData.forEach(edgeData => edges.push(edgeData.key));\n}\n\n/**\n * Function iterating over the egdes from the object at given key using\n * a callback.\n *\n * @param {object}   object   - Target object.\n * @param {mixed}    k        - Neighbor key.\n * @param {function} callback - Callback to use.\n */\nfunction forEachForKeySimple(object, k, callback) {\n  const edgeData = object[k];\n\n  if (!edgeData)\n    return;\n\n  const sourceData = edgeData.source;\n  const targetData = edgeData.target;\n\n  callback(\n    edgeData.key,\n    edgeData.attributes,\n    sourceData.key,\n    targetData.key,\n    sourceData.attributes,\n    targetData.attributes,\n    edgeData.undirected,\n    edgeData.generatedKey\n  );\n}\n\nfunction forEachForKeyMulti(object, k, callback) {\n  const edgesData = object[k];\n\n  if (!edgesData)\n    return;\n\n  edgesData.forEach(edgeData => callback(\n    edgeData.key,\n    edgeData.attributes,\n    edgeData.source.key,\n    edgeData.target.key,\n    edgeData.source.attributes,\n    edgeData.target.attributes,\n    edgeData.undirected,\n    edgeData.generatedKey\n  ));\n}\n\n/**\n * Function iterating over the egdes from the object at given key using\n * a callback until it returns a truthy value to stop iteration.\n *\n * @param {object}   object   - Target object.\n * @param {mixed}    k        - Neighbor key.\n * @param {function} callback - Callback to use.\n */\nfunction forEachForKeySimpleUntil(object, k, callback) {\n  const edgeData = object[k];\n\n  if (!edgeData)\n    return;\n\n  const sourceData = edgeData.source;\n  const targetData = edgeData.target;\n\n  return callback(\n    edgeData.key,\n    edgeData.attributes,\n    sourceData.key,\n    targetData.key,\n    sourceData.attributes,\n    targetData.attributes,\n    edgeData.undirected,\n    edgeData.generatedKey\n  );\n}\n\nfunction forEachForKeyMultiUntil(object, k, callback) {\n  const edgesData = object[k];\n\n  if (!edgesData)\n    return;\n\n  let shouldBreak = false;\n\n  const iterator = edgesData.values();\n  let step, edgeData;\n\n  while ((step = iterator.next(), step.done !== true)) {\n    edgeData = step.value;\n\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected,\n      edgeData.generatedKey\n    );\n\n    if (shouldBreak)\n      return true;\n  }\n\n  return false;\n}\n\n/**\n * Function returning an iterator over the egdes from the object at given key.\n *\n * @param  {object}   object   - Target object.\n * @param  {mixed}    k        - Neighbor key.\n * @return {Iterator}\n */\nfunction createIteratorForKey(object, k) {\n  const v = object[k];\n\n  if (v instanceof Set) {\n    const iterator = v.values();\n\n    return new Iterator(function() {\n      const step = iterator.next();\n\n      if (step.done)\n        return step;\n\n      const edgeData = step.value;\n\n      return {\n        done: false,\n        value: [\n          edgeData.key,\n          edgeData.attributes,\n          edgeData.source.key,\n          edgeData.target.key,\n          edgeData.source.attributes,\n          edgeData.target.attributes\n        ]\n      };\n    });\n  }\n\n  return Iterator.of([\n    v.key,\n    v.attributes,\n    v.source.key,\n    v.target.key,\n    v.source.attributes,\n    v.target.attributes\n  ]);\n}\n\n/**\n * Function creating an array of edges for the given type.\n *\n * @param  {Graph}   graph - Target Graph instance.\n * @param  {string}  type  - Type of edges to retrieve.\n * @return {array}         - Array of edges.\n */\nfunction createEdgeArray(graph, type) {\n  if (graph.size === 0)\n    return [];\n\n  if (type === 'mixed' || type === graph.type) {\n    if (typeof Array.from === 'function')\n      return Array.from(graph._edges.keys());\n\n    return take(graph._edges.keys(), graph._edges.size);\n  }\n\n  const size = type === 'undirected' ?\n    graph.undirectedSize :\n    graph.directedSize;\n\n  const list = new Array(size),\n        mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  let i = 0;\n  let step, data;\n\n  while ((step = iterator.next(), step.done !== true)) {\n    data = step.value;\n\n    if (data.undirected === mask)\n      list[i++] = data.key;\n  }\n\n  return list;\n}\n\n/**\n * Function iterating over a graph's edges using a callback.\n *\n * @param  {Graph}    graph    - Target Graph instance.\n * @param  {string}   type     - Type of edges to retrieve.\n * @param  {function} callback - Function to call.\n */\nfunction forEachEdge(graph, type, callback) {\n  if (graph.size === 0)\n    return;\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  let step, data;\n  const iterator = graph._edges.values();\n\n  while ((step = iterator.next(), step.done !== true)) {\n    data = step.value;\n\n    if (shouldFilter && data.undirected !== mask)\n      continue;\n\n    const {key, attributes, source, target} = data;\n\n    callback(\n      key,\n      attributes,\n      source.key,\n      target.key,\n      source.attributes,\n      target.attributes,\n      data.undirected,\n      data.generatedKey\n    );\n  }\n}\n\n/**\n * Function iterating over a graph's edges using a callback until it returns\n * a truthy value to stop iteration.\n *\n * @param  {Graph}    graph    - Target Graph instance.\n * @param  {string}   type     - Type of edges to retrieve.\n * @param  {function} callback - Function to call.\n */\nfunction forEachEdgeUntil(graph, type, callback) {\n  if (graph.size === 0)\n    return;\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  let step, data;\n  let shouldBreak = false;\n  const iterator = graph._edges.values();\n\n  while ((step = iterator.next(), step.done !== true)) {\n    data = step.value;\n\n    if (shouldFilter && data.undirected !== mask)\n      continue;\n\n    const {key, attributes, source, target} = data;\n\n    shouldBreak = callback(\n      key,\n      attributes,\n      source.key,\n      target.key,\n      source.attributes,\n      target.attributes,\n      data.undirected,\n      data.generatedKey\n    );\n\n    if (shouldBreak)\n      break;\n  }\n}\n\n/**\n * Function creating an iterator of edges for the given type.\n *\n * @param  {Graph}    graph - Target Graph instance.\n * @param  {string}   type  - Type of edges to retrieve.\n * @return {Iterator}\n */\nfunction createEdgeIterator(graph, type) {\n  if (graph.size === 0)\n    return Iterator.empty();\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  return new Iterator(function next() {\n    let step, data;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      step = iterator.next();\n\n      if (step.done)\n        return step;\n\n      data = step.value;\n\n      if (shouldFilter && data.undirected !== mask)\n        continue;\n\n      break;\n    }\n\n    const value = [\n      data.key,\n      data.attributes,\n      data.source.key,\n      data.target.key,\n      data.source.attributes,\n      data.target.attributes\n    ];\n\n    return {value, done: false};\n  });\n}\n\n/**\n * Function creating an array of edges for the given type & the given node.\n *\n * @param  {boolean} multi     - Whether the graph is multi or not.\n * @param  {string}  type      - Type of edges to retrieve.\n * @param  {string}  direction - In or out?\n * @param  {any}     nodeData  - Target node's data.\n * @return {array}             - Array of edges.\n */\nfunction createEdgeArrayForNode(multi, type, direction, nodeData) {\n  const edges = [];\n\n  const fn = multi ? collectMulti : collectSimple;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out')\n      fn(edges, nodeData.in);\n    if (direction !== 'in')\n      fn(edges, nodeData.out);\n\n    // Handling self loop edge case\n    if (!direction && nodeData.directedSelfLoops > 0)\n      edges.splice(edges.lastIndexOf(nodeData.key), 1);\n  }\n\n  if (type !== 'directed') {\n    fn(edges, nodeData.undirected);\n  }\n\n  return edges;\n}\n\n/**\n * Function iterating over a node's edges using a callback.\n *\n * @param  {boolean}  multi     - Whether the graph is multi or not.\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Function to call.\n */\nfunction forEachEdgeForNode(multi, type, direction, nodeData, callback) {\n  const fn = multi ? forEachMulti : forEachSimple;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out')\n      fn(nodeData.in, callback);\n    if (direction !== 'in')\n      fn(nodeData.out, callback, !direction ? nodeData.key : null);\n  }\n\n  if (type !== 'directed') {\n    fn(nodeData.undirected, callback);\n  }\n}\n\n/**\n * Function iterating over a node's edges using a callback until it returns\n * a truthy value to stop iteration.\n *\n * @param  {boolean}  multi     - Whether the graph is multi or not.\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Function to call.\n */\nfunction forEachEdgeForNodeUntil(multi, type, direction, nodeData, callback) {\n  const fn = multi ? forEachMultiUntil : forEachSimpleUntil;\n\n  let shouldBreak = false;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      shouldBreak = fn(nodeData.in, callback);\n\n      if (shouldBreak)\n        return;\n    }\n    if (direction !== 'in') {\n      shouldBreak = fn(nodeData.out, callback, !direction ? nodeData.key : null);\n\n      if (shouldBreak)\n        return;\n    }\n  }\n\n  if (type !== 'directed') {\n    shouldBreak = fn(nodeData.undirected, callback);\n\n    if (shouldBreak)\n      return;\n  }\n}\n\n/**\n * Function iterating over a node's edges using a callback.\n *\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createEdgeIteratorForNode(type, direction, nodeData) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out' && typeof nodeData.in !== 'undefined')\n      iterator = chain(iterator, createIterator(nodeData.in));\n    if (direction !== 'in' && typeof nodeData.out !== 'undefined')\n      iterator = chain(iterator, createIterator(nodeData.out, !direction ? nodeData.key : null));\n  }\n\n  if (type !== 'directed' && typeof nodeData.undirected !== 'undefined') {\n    iterator = chain(iterator, createIterator(nodeData.undirected));\n  }\n\n  return iterator;\n}\n\n/**\n * Function creating an array of edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {any}      target     - Target node.\n * @return {array}               - Array of edges.\n */\nfunction createEdgeArrayForPath(type, multi, direction, sourceData, target) {\n  const fn = multi ? collectForKeyMulti : collectForKeySimple;\n\n  const edges = [];\n\n  if (type !== 'undirected') {\n\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out')\n      fn(edges, sourceData.in, target);\n\n    if (typeof sourceData.out !== 'undefined' && direction !== 'in')\n      fn(edges, sourceData.out, target);\n\n    // Handling self loop edge case\n    if (!direction && sourceData.directedSelfLoops > 0)\n      edges.splice(edges.lastIndexOf(sourceData.key), 1);\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined')\n      fn(edges, sourceData.undirected, target);\n  }\n\n  return edges;\n}\n\n/**\n * Function iterating over edges for the given path using a callback.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction forEachEdgeForPath(type, multi, direction, sourceData, target, callback) {\n  const fn = multi ? forEachForKeyMulti : forEachForKeySimple;\n\n  if (type !== 'undirected') {\n\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out')\n      fn(sourceData.in, target, callback);\n\n    if (sourceData.key !== target)\n      if (typeof sourceData.out !== 'undefined' && direction !== 'in')\n        fn(sourceData.out, target, callback);\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined')\n      fn(sourceData.undirected, target, callback);\n  }\n}\n\n/**\n * Function iterating over edges for the given path using a callback until\n * it returns a truthy value to stop iteration.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction forEachEdgeForPathUntil(type, multi, direction, sourceData, target, callback) {\n  const fn = multi ? forEachForKeyMultiUntil : forEachForKeySimpleUntil;\n\n  let shouldBreak = false;\n\n  if (type !== 'undirected') {\n\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out') {\n      shouldBreak = fn(sourceData.in, target, callback);\n\n      if (shouldBreak)\n        return;\n    }\n\n    if (sourceData.key !== target)\n      if (typeof sourceData.out !== 'undefined' && direction !== 'in') {\n        shouldBreak = fn(sourceData.out, target, callback, !direction ? sourceData.key : null);\n\n        if (shouldBreak)\n          return;\n      }\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined') {\n      shouldBreak = fn(sourceData.undirected, target, callback);\n\n      if (shouldBreak)\n        return;\n    }\n  }\n}\n\n/**\n * Function returning an iterator over edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction createEdgeIteratorForPath(type, direction, sourceData, target) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n\n    if (\n      typeof sourceData.in !== 'undefined' &&\n      direction !== 'out' &&\n      target in sourceData.in\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.in, target));\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      target in sourceData.out\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.out, target));\n  }\n\n  if (type !== 'directed') {\n    if (\n      typeof sourceData.undirected !== 'undefined' &&\n      target in sourceData.undirected\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.undirected, target));\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching an edge array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeArrayCreator(Class, description) {\n  const {\n    name,\n    type,\n    direction\n  } = description;\n\n  /**\n   * Function returning an array of certain edges.\n   *\n   * Arity 0: Return all the relevant edges.\n   *\n   * Arity 1: Return all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Return the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function(source, target) {\n\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    if (!arguments.length)\n      return createEdgeArray(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(`Graph.${name}: could not find the \"${source}\" node in the graph.`);\n\n      // Iterating over a node's edges\n      return createEdgeArrayForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData\n      );\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(`Graph.${name}:  could not find the \"${source}\" source node in the graph.`);\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(`Graph.${name}:  could not find the \"${target}\" target node in the graph.`);\n\n      // Iterating over the edges between source & target\n      return createEdgeArrayForPath(type, this.multi, direction, sourceData, target);\n    }\n\n    throw new InvalidArgumentsGraphError(`Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`);\n  };\n}\n\n/**\n * Function attaching a edge callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachEdge(Class, description) {\n  const {\n    name,\n    type,\n    direction\n  } = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function(source, target, callback) {\n\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(`Graph.${forEachName}: could not find the \"${source}\" node in the graph.`);\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(`Graph.${forEachName}:  could not find the \"${source}\" source node in the graph.`);\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(`Graph.${forEachName}:  could not find the \"${target}\" target node in the graph.`);\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(type, this.multi, direction, sourceData, target, callback);\n    }\n\n    throw new InvalidArgumentsGraphError(`Graph.${forEachName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`);\n  };\n}\n\n/**\n * Function attaching a breakable edge callback iterator method to the Graph\n * prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachEdgeUntil(Class, description) {\n  const {\n    name,\n    type,\n    direction\n  } = description;\n\n  const forEachUntilName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1) + 'Until';\n\n  /**\n   * Function iterating over the graph's relevant edges by applying the given\n   * callback and breaking as soon as the callback return a truthy value.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachUntilName] = function(source, target, callback) {\n\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdgeUntil(this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(`Graph.${forEachUntilName}: could not find the \"${source}\" node in the graph.`);\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNodeUntil(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(`Graph.${forEachUntilName}:  could not find the \"${source}\" source node in the graph.`);\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(`Graph.${forEachUntilName}:  could not find the \"${target}\" target node in the graph.`);\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPathUntil(type, this.multi, direction, sourceData, target, callback);\n    }\n\n    throw new InvalidArgumentsGraphError(`Graph.${forEachUntilName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`);\n  };\n}\n\n/**\n * Function attaching an edge iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nexport function attachEdgeIteratorCreator(Class, description) {\n  const {\n    name: originalName,\n    type,\n    direction\n  } = description;\n\n  const name = originalName.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over the graph's edges.\n   *\n   * Arity 0: Iterate over all the relevant edges.\n   *\n   * Arity 1: Iterate over all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Iterate over the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function(source, target) {\n\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    if (!arguments.length)\n      return createEdgeIterator(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(`Graph.${name}: could not find the \"${source}\" node in the graph.`);\n\n      // Iterating over a node's edges\n      return createEdgeIteratorForNode(type, direction, sourceData);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(`Graph.${name}:  could not find the \"${source}\" source node in the graph.`);\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(`Graph.${name}:  could not find the \"${target}\" target node in the graph.`);\n\n      // Iterating over the edges between source & target\n      return createEdgeIteratorForPath(type, direction, sourceData, target);\n    }\n\n    throw new InvalidArgumentsGraphError(`Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`);\n  };\n}\n\n/**\n * Function attaching every edge iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport function attachEdgeIterationMethods(Graph) {\n  EDGES_ITERATION.forEach(description => {\n    attachEdgeArrayCreator(Graph, description);\n    attachForEachEdge(Graph, description);\n    attachForEachEdgeUntil(Graph, description);\n    attachEdgeIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Neighbor Iteration\n * ==============================\n *\n * Attaching some methods to the Graph class to be able to iterate over\n * neighbors.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\nimport take from 'obliterator/take';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError\n} from '../errors';\n\n/**\n * Definitions.\n */\nconst NEIGHBORS_ITERATION = [\n  {\n    name: 'neighbors',\n    type: 'mixed'\n  },\n  {\n    name: 'inNeighbors',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outNeighbors',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundNeighbors',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundNeighbors',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedNeighbors',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedNeighbors',\n    type: 'undirected'\n  }\n];\n\n/**\n * Function merging neighbors into the given set iterating over the given object.\n *\n * @param {BasicSet} neighbors - Neighbors set.\n * @param {object}   object    - Target object.\n */\nfunction merge(neighbors, object) {\n  if (typeof object === 'undefined')\n    return;\n\n  for (const neighbor in object)\n    neighbors.add(neighbor);\n}\n\n/**\n * Function creating an array of relevant neighbors for the given node.\n *\n * @param  {string}       type      - Type of neighbors.\n * @param  {string}       direction - Direction.\n * @param  {any}          nodeData  - Target node's data.\n * @return {Array}                  - The list of neighbors.\n */\nfunction createNeighborArrayForNode(type, direction, nodeData) {\n\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return Object.keys(nodeData.undirected);\n\n    if (typeof direction === 'string')\n      return Object.keys(nodeData[direction]);\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const neighbors = new Set();\n\n  if (type !== 'undirected') {\n\n    if (direction !== 'out') {\n      merge(neighbors, nodeData.in);\n    }\n    if (direction !== 'in') {\n      merge(neighbors, nodeData.out);\n    }\n  }\n\n  if (type !== 'directed') {\n    merge(neighbors, nodeData.undirected);\n  }\n\n  return take(neighbors.values(), neighbors.size);\n}\n\n/**\n * Function iterating over the given node's relevant neighbors using a\n * callback.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Callback to use.\n */\nfunction forEachInObject(nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set)\n      edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n          targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    callback(\n      neighborData.key,\n      neighborData.attributes\n    );\n  }\n}\n\nfunction forEachInObjectOnce(visited, nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set)\n      edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n          targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited.has(neighborData.key))\n      continue;\n\n    visited.add(neighborData.key);\n\n    callback(\n      neighborData.key,\n      neighborData.attributes\n    );\n  }\n}\n\n/**\n * Function iterating over the given node's relevant neighbors using a\n * callback until it returns a truthy value to stop iteration.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Callback to use.\n */\nfunction forEachInObjectUntil(nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set)\n      edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n          targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    const shouldBreak = callback(\n      neighborData.key,\n      neighborData.attributes\n    );\n\n    if (shouldBreak)\n      return true;\n  }\n\n  return false;\n}\n\nfunction forEachInObjectOnceUntil(visited, nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set)\n      edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n          targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited.has(neighborData.key))\n      continue;\n\n    visited.add(neighborData.key);\n\n    const shouldBreak = callback(\n      neighborData.key,\n      neighborData.attributes\n    );\n\n    if (shouldBreak)\n      return true;\n  }\n\n  return false;\n}\n\nfunction forEachNeighborForNode(type, direction, nodeData, callback) {\n\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return forEachInObject(nodeData, nodeData.undirected, callback);\n\n    if (typeof direction === 'string')\n      return forEachInObject(nodeData, nodeData[direction], callback);\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const visited = new Set();\n\n  if (type !== 'undirected') {\n\n    if (direction !== 'out') {\n      forEachInObjectOnce(visited, nodeData, nodeData.in, callback);\n    }\n    if (direction !== 'in') {\n      forEachInObjectOnce(visited, nodeData, nodeData.out, callback);\n    }\n  }\n\n  if (type !== 'directed') {\n    forEachInObjectOnce(visited, nodeData, nodeData.undirected, callback);\n  }\n}\n\nfunction forEachNeighborForNodeUntil(type, direction, nodeData, callback) {\n\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return forEachInObjectUntil(nodeData, nodeData.undirected, callback);\n\n    if (typeof direction === 'string')\n      return forEachInObjectUntil(nodeData, nodeData[direction], callback);\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const visited = new Set();\n\n  let shouldBreak = false;\n\n  if (type !== 'undirected') {\n\n    if (direction !== 'out') {\n      shouldBreak = forEachInObjectOnceUntil(visited, nodeData, nodeData.in, callback);\n\n      if (shouldBreak)\n        return;\n    }\n    if (direction !== 'in') {\n      shouldBreak = forEachInObjectOnceUntil(visited, nodeData, nodeData.out, callback);\n\n      if (shouldBreak)\n        return;\n    }\n  }\n\n  if (type !== 'directed') {\n    shouldBreak = forEachInObjectOnceUntil(visited, nodeData, nodeData.undirected, callback);\n\n    if (shouldBreak)\n      return;\n  }\n}\n\n/**\n * Function returning an iterator over the given node's relevant neighbors.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createObjectIterator(nodeData, object) {\n  const keys = Object.keys(object),\n        l = keys.length;\n\n  let i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {done: true};\n\n    let edgeData = object[keys[i++]];\n\n    if (edgeData instanceof Set)\n      edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n          targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    return {\n      done: false,\n      value: [neighborData.key, neighborData.attributes]\n    };\n  });\n}\n\nfunction createDedupedObjectIterator(visited, nodeData, object) {\n  const keys = Object.keys(object),\n        l = keys.length;\n\n  let i = 0;\n\n  return new Iterator(function next() {\n    if (i >= l)\n      return {done: true};\n\n    let edgeData = object[keys[i++]];\n\n    if (edgeData instanceof Set)\n      edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n          targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited.has(neighborData.key))\n      return next();\n\n    visited.add(neighborData.key);\n\n    return {\n      done: false,\n      value: [neighborData.key, neighborData.attributes]\n    };\n  });\n}\n\nfunction createNeighborIterator(type, direction, nodeData) {\n\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return createObjectIterator(nodeData, nodeData.undirected);\n\n    if (typeof direction === 'string')\n      return createObjectIterator(nodeData, nodeData[direction]);\n  }\n\n  let iterator = Iterator.empty();\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const visited = new Set();\n\n  if (type !== 'undirected') {\n\n    if (direction !== 'out') {\n      iterator = chain(iterator, createDedupedObjectIterator(visited, nodeData, nodeData.in));\n    }\n    if (direction !== 'in') {\n      iterator = chain(iterator, createDedupedObjectIterator(visited, nodeData, nodeData.out));\n    }\n  }\n\n  if (type !== 'directed') {\n    iterator = chain(iterator, createDedupedObjectIterator(visited, nodeData, nodeData.undirected));\n  }\n\n  return iterator;\n}\n\n/**\n * Function returning whether the given node has target neighbor.\n *\n * @param  {Graph}        graph     - Target graph.\n * @param  {string}       type      - Type of neighbor.\n * @param  {string}       direction - Direction.\n * @param  {any}          node      - Target node.\n * @param  {any}          neighbor  - Target neighbor.\n * @return {boolean}\n */\nfunction nodeHasNeighbor(graph, type, direction, node, neighbor) {\n\n  const nodeData = graph._nodes.get(node);\n\n  if (type !== 'undirected') {\n\n    if (direction !== 'out' && typeof nodeData.in !== 'undefined') {\n      for (const k in nodeData.in)\n        if (k === neighbor)\n          return true;\n    }\n    if (direction !== 'in' && typeof nodeData.out !== 'undefined') {\n      for (const k in nodeData.out)\n        if (k === neighbor)\n          return true;\n    }\n  }\n\n  if (type !== 'directed' && typeof nodeData.undirected !== 'undefined') {\n    for (const k in nodeData.undirected)\n        if (k === neighbor)\n          return true;\n  }\n\n  return false;\n}\n\n/**\n * Function attaching a neighbors array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborArrayCreator(Class, description) {\n  const {\n    name,\n    type,\n    direction\n  } = description;\n\n  /**\n   * Function returning an array or the count of certain neighbors.\n   *\n   * Arity 1: Return all of a node's relevant neighbors.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Return whether the two nodes are indeed neighbors.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The neighbors or the number of neighbors.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function(node) {\n\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    if (arguments.length === 2) {\n      const node1 = '' + arguments[0],\n            node2 = '' + arguments[1];\n\n      if (!this._nodes.has(node1))\n        throw new NotFoundGraphError(`Graph.${name}: could not find the \"${node1}\" node in the graph.`);\n\n      if (!this._nodes.has(node2))\n        throw new NotFoundGraphError(`Graph.${name}: could not find the \"${node2}\" node in the graph.`);\n\n      // Here, we want to assess whether the two given nodes are neighbors\n      return nodeHasNeighbor(\n        this,\n        type,\n        direction,\n        node1,\n        node2\n      );\n    }\n    else if (arguments.length === 1) {\n      node = '' + node;\n\n      const nodeData = this._nodes.get(node);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(`Graph.${name}: could not find the \"${node}\" node in the graph.`);\n\n      // Here, we want to iterate over a node's relevant neighbors\n      const neighbors = createNeighborArrayForNode(\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData\n      );\n\n      return neighbors;\n    }\n\n    throw new InvalidArgumentsGraphError(`Graph.${name}: invalid number of arguments (expecting 1 or 2 and got ${arguments.length}).`);\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachNeighbor(Class, description) {\n  const {\n    name,\n    type,\n    direction\n  } = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function(node, callback) {\n\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(`Graph.${forEachName}: could not find the \"${node}\" node in the graph.`);\n\n    // Here, we want to iterate over a node's relevant neighbors\n    forEachNeighborForNode(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n}\n\n/**\n * Function attaching a breakable neighbors callback iterator method to the\n * Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachNeighborUntil(Class, description) {\n  const {\n    name,\n    type,\n    direction\n  } = description;\n\n  const forEachUntilName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1) + 'Until';\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachUntilName] = function(node, callback) {\n\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(`Graph.${forEachUntilName}: could not find the \"${node}\" node in the graph.`);\n\n    // Here, we want to iterate over a node's relevant neighbors\n    forEachNeighborForNodeUntil(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborIteratorCreator(Class, description) {\n  const {\n    name,\n    type,\n    direction\n  } = description;\n\n  const iteratorName = name.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over all the relevant neighbors.\n   *\n   * @param  {any}      node     - Target node.\n   * @return {Iterator}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[iteratorName] = function(node) {\n\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(`Graph.${iteratorName}: could not find the \"${node}\" node in the graph.`);\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborIterator(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching every neighbor iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport function attachNeighborIterationMethods(Graph) {\n  NEIGHBORS_ITERATION.forEach(description => {\n    attachNeighborArrayCreator(Graph, description);\n    attachForEachNeighbor(Graph, description);\n    attachForEachNeighborUntil(Graph, description);\n    attachNeighborIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Adjacency Iteration\n * ================================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's adjacency.\n */\nimport Iterator from 'obliterator/iterator';\n\n/**\n * Function iterating over a simple graph's adjacency using a callback.\n *\n * @param {boolean}  breakable - Can we break?\n * @param {Graph}    graph     - Target Graph instance.\n * @param {callback} function  - Iteration callback.\n */\nexport function forEachAdjacencySimple(breakable, graph, callback) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let step, sourceData, neighbor, adj, edgeData, targetData, shouldBreak;\n\n  while ((step = iterator.next(), step.done !== true)) {\n    sourceData = step.value;\n\n    if (type !== 'undirected') {\n      adj = sourceData.out;\n\n      for (neighbor in adj) {\n        edgeData = adj[neighbor];\n        targetData = edgeData.target;\n\n        shouldBreak = callback(\n          sourceData.key,\n          targetData.key,\n          sourceData.attributes,\n          targetData.attributes,\n          edgeData.key,\n          edgeData.attributes,\n          edgeData.undirected,\n          edgeData.generatedKey\n        );\n\n        if (breakable && shouldBreak)\n          return;\n      }\n    }\n\n    if (type !== 'directed') {\n      adj = sourceData.undirected;\n\n      for (neighbor in adj) {\n        edgeData = adj[neighbor];\n        targetData = edgeData.target;\n\n        if (targetData.key !== neighbor)\n          targetData = edgeData.source;\n\n        shouldBreak = callback(\n          sourceData.key,\n          targetData.key,\n          sourceData.attributes,\n          targetData.attributes,\n          edgeData.key,\n          edgeData.attributes,\n          edgeData.undirected,\n          edgeData.generatedKey\n        );\n\n        if (breakable && shouldBreak)\n          return;\n      }\n    }\n  }\n}\n\n/**\n * Function iterating over a multi graph's adjacency using a callback.\n *\n * @param {boolean}  breakable - Can we break?\n * @param {Graph}    graph    - Target Graph instance.\n * @param {callback} function - Iteration callback.\n */\nexport function forEachAdjacencyMulti(breakable, graph, callback) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let step, sourceData, neighbor, container, containerStep, adj, edgeData, targetData, shouldBreak;\n\n  while ((step = iterator.next(), step.done !== true)) {\n    sourceData = step.value;\n\n    if (type !== 'undirected') {\n      adj = sourceData.out;\n\n      for (neighbor in adj) {\n        container = adj[neighbor].values();\n\n        while ((containerStep = container.next(), containerStep.done !== true)) {\n          edgeData = containerStep.value;\n          targetData = edgeData.target;\n\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected,\n            edgeData.generatedKey\n          );\n\n          if (breakable && shouldBreak)\n            return;\n        }\n      }\n    }\n\n    if (type !== 'directed') {\n      adj = sourceData.undirected;\n\n      for (neighbor in adj) {\n        container = adj[neighbor].values();\n\n        while ((containerStep = container.next(), containerStep.done !== true)) {\n          edgeData = containerStep.value;\n          targetData = edgeData.target;\n\n          if (targetData.key !== neighbor)\n            targetData = edgeData.source;\n\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected,\n            edgeData.generatedKey\n          );\n\n          if (breakable && shouldBreak)\n            return;\n        }\n      }\n    }\n  }\n}\n\nexport function createAdjacencyIteratorSimple(graph) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let state = 'outer',\n      sourceData,\n      neighbors,\n      adj,\n      offset;\n\n  return new Iterator(function next() {\n    let step;\n\n    if (state === 'outer') {\n      step = iterator.next();\n\n      if (step.done === true)\n        return step;\n\n      sourceData = step.value;\n\n      state = 'directed';\n      return next();\n    }\n\n    if (state === 'directed') {\n      if (type === 'undirected') {\n        state = 'undirected';\n        return next();\n      }\n\n      adj = sourceData.out;\n      neighbors = Object.keys(sourceData.out);\n      offset = 0;\n      state = 'inner-directed';\n\n      return next();\n    }\n\n    if (state === 'undirected') {\n      if (type === 'directed') {\n        state = 'outer';\n        return next();\n      }\n\n      adj = sourceData.undirected;\n      neighbors = Object.keys(sourceData.undirected);\n      offset = 0;\n      state = 'inner-undirected';\n    }\n\n    // Inner\n    if (offset >= neighbors.length) {\n      if (state === 'inner-undirected')\n        state = 'outer';\n      else\n        state = 'undirected';\n\n      return next();\n    }\n\n    const neighbor = neighbors[offset++];\n    const edgeData = adj[neighbor];\n    let targetData = edgeData.target;\n\n    if (state === 'inner-undirected' && targetData.key === sourceData.key)\n      targetData = edgeData.source;\n\n    return {\n      done: false,\n      value: [\n        sourceData.key,\n        targetData.key,\n        sourceData.attributes,\n        targetData.attributes,\n        edgeData.key,\n        edgeData.attributes\n      ]\n    };\n  });\n}\n\nexport function createAdjacencyIteratorMulti(graph) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let state = 'outer',\n      sourceData,\n      neighbors,\n      container = null,\n      adj,\n      offset;\n\n  return new Iterator(function next() {\n    let step;\n\n    if (state === 'outer') {\n      step = iterator.next();\n\n      if (step.done === true)\n        return step;\n\n      sourceData = step.value;\n\n      state = 'directed';\n      return next();\n    }\n\n    if (state === 'directed') {\n      if (type === 'undirected') {\n        state = 'undirected';\n        return next();\n      }\n\n      adj = sourceData.out;\n      neighbors = Object.keys(sourceData.out);\n      offset = 0;\n      state = 'inner-directed';\n\n      return next();\n    }\n\n    if (state === 'undirected') {\n      if (type === 'directed') {\n        state = 'outer';\n        return next();\n      }\n\n      adj = sourceData.undirected;\n      neighbors = Object.keys(sourceData.undirected);\n      offset = 0;\n      state = 'inner-undirected';\n    }\n\n    // Inner\n    if (!container && offset >= neighbors.length) {\n      if (state === 'inner-undirected')\n        state = 'outer';\n      else\n        state = 'undirected';\n\n      return next();\n    }\n\n    if (!container) {\n      const neighbor = neighbors[offset++];\n      container = adj[neighbor].values();\n      return next();\n    }\n\n    step = container.next();\n\n    if (step.done) {\n      container = null;\n      return next();\n    }\n\n    const edgeData = step.value;\n    let targetData = edgeData.target;\n\n    if (state === 'inner-undirected' && targetData.key === sourceData.key)\n      targetData = edgeData.source;\n\n    return {\n      done: false,\n      value: [\n        sourceData.key,\n        targetData.key,\n        sourceData.attributes,\n        targetData.attributes,\n        edgeData.key,\n        edgeData.attributes\n      ]\n    };\n  });\n}\n","/**\n * Graphology Serialization Utilities\n * ===================================\n *\n * Collection of functions used to validate import-export formats & to ouput\n * them from internal graph data.\n *\n * Serialized Node:\n * {key, ?attributes}\n *\n * Serialized Edge:\n * {key?, source, target, attributes?, undirected?}\n *\n * Serialized Graph:\n * {nodes[], edges?[]}\n */\nimport {assign, isPlainObject, isEmpty} from './utils';\n\n/**\n * Formats internal node data into a serialized node.\n *\n * @param  {any}    key  - The node's key.\n * @param  {object} data - Internal node's data.\n * @return {array}       - The serialized node.\n */\nexport function serializeNode(key, data) {\n  const serialized = {key};\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  return serialized;\n}\n\n/**\n * Formats internal edge data into a serialized edge.\n *\n * @param  {any}    key  - The edge's key.\n * @param  {object} data - Internal edge's data.\n * @return {array}       - The serialized edge.\n */\nexport function serializeEdge(key, data) {\n  const serialized = {\n    source: data.source.key,\n    target: data.target.key\n  };\n\n  // We export the key unless if it was provided by the user\n  if (!data.generatedKey)\n    serialized.key = key;\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  if (data.undirected)\n    serialized.undirected = true;\n\n  return serialized;\n}\n\n/**\n * Checks whether the given value is a serialized node.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedNode(value) {\n  if (!isPlainObject(value))\n    return 'not-object';\n\n  if (!('key' in value))\n    return 'no-key';\n\n  if ('attributes' in value &&\n      (!isPlainObject(value.attributes) || value.attributes === null))\n    return 'invalid-attributes';\n\n  return null;\n}\n\n/**\n * Checks whether the given value is a serialized edge.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedEdge(value) {\n  if (!isPlainObject(value))\n    return 'not-object';\n\n  if (!('source' in value))\n    return 'no-source';\n\n  if (!('target' in value))\n    return 'no-target';\n\n  if ('attributes' in value &&\n      (!isPlainObject(value.attributes) || value.attributes === null))\n    return 'invalid-attributes';\n\n  if ('undirected' in value &&\n      (typeof value.undirected !== 'boolean'))\n    return 'invalid-undirected';\n\n  return null;\n}\n","/* eslint no-nested-ternary: 0 */\n/**\n * Graphology Reference Implementation\n * ====================================\n *\n * Reference implementation of the graphology specs.\n */\nimport {EventEmitter} from 'events';\nimport Iterator from 'obliterator/iterator';\nimport take from 'obliterator/take';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\nimport {\n  MixedNodeData,\n  DirectedNodeData,\n  UndirectedNodeData,\n  EdgeData\n} from './data';\n\nimport {\n  updateStructureIndex,\n  clearEdgeFromStructureIndex,\n  clearStructureIndex,\n  upgradeStructureIndexToMulti\n} from './indices';\n\nimport {attachAttributesMethods} from './attributes';\nimport {attachEdgeIterationMethods} from './iteration/edges';\nimport {attachNeighborIterationMethods} from './iteration/neighbors';\nimport {\n  forEachAdjacencySimple,\n  forEachAdjacencyMulti,\n  createAdjacencyIteratorSimple,\n  createAdjacencyIteratorMulti\n} from './iteration/adjacency';\n\nimport {\n  serializeNode,\n  serializeEdge,\n  validateSerializedNode,\n  validateSerializedEdge\n} from './serialization';\n\nimport {\n  assign,\n  getMatchingEdge,\n  isGraph,\n  isPlainObject,\n  privateProperty,\n  readOnlyProperty,\n  incrementalId,\n  validateHints\n} from './utils';\n\n/**\n * Enums.\n */\nconst TYPES = new Set([\n  'directed',\n  'undirected',\n  'mixed'\n]);\n\nconst EMITTER_PROPS = new Set([\n  'domain',\n  '_events',\n  '_eventsCount',\n  '_maxListeners'\n]);\n\nconst EDGE_ADD_METHODS = [\n  {\n    name: verb => `${verb}Edge`,\n    generateKey: true\n  },\n  {\n    name: verb => `${verb}DirectedEdge`,\n    generateKey: true,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdge`,\n    generateKey: true,\n    type: 'undirected'\n  },\n  {\n    name: verb => `${verb}EdgeWithKey`,\n  },\n  {\n    name: verb => `${verb}DirectedEdgeWithKey`,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdgeWithKey`,\n    type: 'undirected'\n  }\n];\n\n/**\n * Default options.\n */\nconst DEFAULTS = {\n  allowSelfLoops: true,\n  edgeKeyGenerator: null,\n  multi: false,\n  type: 'mixed'\n};\n\n/**\n * Abstract functions used by the Graph class for various methods.\n */\n\n/**\n * Internal method used to add a node to the given graph\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {any}     node            - The node's key.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {NodeData}                - Created node data.\n */\nfunction addNode(graph, node, attributes) {\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(`Graph.addNode: invalid attributes. Expecting an object but got \"${attributes}\"`);\n\n  // String coercion\n  node = '' + node;\n  attributes = attributes || {};\n\n  if (graph._nodes.has(node))\n    throw new UsageGraphError(`Graph.addNode: the \"${node}\" node already exist in the graph.`);\n\n  const data = new graph.NodeDataClass(node, attributes);\n\n  // Adding the node to internal register\n  graph._nodes.set(node, data);\n\n  // Emitting\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Same as the above but without sanity checks because we call this in contexts\n * where necessary checks were already done.\n */\nfunction unsafeAddNode(graph, node, attributes) {\n  const data = new graph.NodeDataClass(node, attributes);\n\n  graph._nodes.set(node, data);\n\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction addEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes\n) {\n\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(`Graph.${name}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`);\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(`Graph.${name}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`);\n\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(`Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`);\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n  attributes = attributes || {};\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(`Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`);\n\n  const sourceData = graph._nodes.get(source),\n        targetData = graph._nodes.get(target);\n\n  if (!sourceData)\n    throw new NotFoundGraphError(`Graph.${name}: source node \"${source}\" not found.`);\n\n  if (!targetData)\n    throw new NotFoundGraphError(`Graph.${name}: target node \"${target}\" not found.`);\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey)\n    edge = graph._edgeKeyGenerator(eventData);\n\n  // Coercion of edge key\n  edge = '' + edge;\n\n  // Here, we have a key collision\n  if (graph._edges.has(edge))\n    throw new UsageGraphError(`Graph.${name}: the \"${edge}\" edge already exists in the graph.`);\n\n  // Here, we might have a source / target collision\n  if (\n    !graph.multi &&\n    (\n      undirected ?\n        typeof sourceData.undirected[target] !== 'undefined' :\n        typeof sourceData.out[target] !== 'undefined'\n    )\n  ) {\n    throw new UsageGraphError(`Graph.${name}: an edge linking \"${source}\" to \"${target}\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`);\n  }\n\n  // Storing some data\n  const edgeData = new EdgeData(\n    undirected,\n    edge,\n    mustGenerateKey,\n    sourceData,\n    targetData,\n    attributes\n  );\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  if (source === target) {\n    if (undirected) {\n      sourceData.undirectedSelfLoops++;\n      graph._undirectedSelfLoopCount++;\n    }\n    else {\n      sourceData.directedSelfLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  }\n  else {\n    if (undirected) {\n      sourceData.undirectedDegree++;\n      targetData.undirectedDegree++;\n    }\n    else {\n      sourceData.outDegree++;\n      targetData.inDegree++;\n    }\n  }\n\n  // Updating relevant index\n  updateStructureIndex(\n    graph,\n    undirected,\n    edgeData,\n    source,\n    target,\n    sourceData,\n    targetData\n  );\n\n  if (undirected)\n    graph._undirectedSize++;\n  else\n    graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return edge;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @param  {boolean} [asUpdater]       - Are we updating or merging?\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction mergeEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes,\n  asUpdater\n) {\n\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(`Graph.${name}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`);\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(`Graph.${name}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`);\n\n  if (attributes) {\n    if (asUpdater) {\n      if (typeof attributes !== 'function')\n        throw new InvalidArgumentsGraphError(`Graph.${name}: invalid updater function. Expecting a function but got \"${attributes}\"`);\n    }\n    else {\n      if (!isPlainObject(attributes))\n        throw new InvalidArgumentsGraphError(`Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`);\n    }\n  }\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n\n  let updater;\n\n  if (asUpdater) {\n    updater = attributes;\n    attributes = undefined;\n  }\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(`Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`);\n\n  let sourceData = graph._nodes.get(source),\n      targetData = graph._nodes.get(target),\n      edgeData;\n\n  // Do we need to handle duplicate?\n  let alreadyExistingEdgeData;\n\n  if (!mustGenerateKey) {\n    edgeData = graph._edges.get(edge);\n\n    if (edgeData) {\n\n      // Here, we need to ensure, if the user gave a key, that source & target\n      // are coherent\n      if (\n        (edgeData.source.key !== source || edgeData.target.key !== target) ||\n        (undirected && (edgeData.source.key !== target || edgeData.target.key !== source))\n      ) {\n        throw new UsageGraphError(`Graph.${name}: inconsistency detected when attempting to merge the \"${edge}\" edge with \"${source}\" source & \"${target}\" target vs. (\"${edgeData.source.key}\", \"${edgeData.target.key}\").`);\n      }\n\n      alreadyExistingEdgeData = edgeData;\n    }\n  }\n\n  // Here, we might have a source / target collision\n  if (\n    !alreadyExistingEdgeData &&\n    !graph.multi &&\n    sourceData\n  ) {\n    alreadyExistingEdgeData = undirected ?\n      sourceData.undirected[target] :\n      sourceData.out[target];\n  }\n\n  // Handling duplicates\n  if (alreadyExistingEdgeData) {\n\n    // We can skip the attribute merging part if the user did not provide them\n    if (asUpdater ? !updater : !attributes)\n      return alreadyExistingEdgeData.key;\n\n    // Updating the attributes\n    if (asUpdater) {\n      const oldAttributes = alreadyExistingEdgeData.attributes;\n      alreadyExistingEdgeData.attributes = updater(oldAttributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'replace',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes,\n      });\n    }\n\n    // Merging the attributes\n    else {\n      assign(alreadyExistingEdgeData.attributes, attributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'merge',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes,\n        data: attributes\n      });\n    }\n\n    return alreadyExistingEdgeData.key;\n  }\n\n  attributes = attributes || {};\n\n  if (asUpdater && updater)\n    attributes = updater(attributes);\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey)\n    edge = graph._edgeKeyGenerator(eventData);\n\n  // Coercion of edge key\n  edge = '' + edge;\n\n  // Here, we have a key collision\n  if (graph._edges.has(edge))\n    throw new UsageGraphError(`Graph.${name}: the \"${edge}\" edge already exists in the graph.`);\n\n  if (!sourceData) {\n    sourceData = unsafeAddNode(graph, source, {});\n\n    if (source === target)\n      targetData = sourceData;\n  }\n  if (!targetData) {\n    targetData = unsafeAddNode(graph, target, {});\n  }\n\n  // Storing some data\n  edgeData = new EdgeData(\n    undirected,\n    edge,\n    mustGenerateKey,\n    sourceData,\n    targetData,\n    attributes\n  );\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  if (source === target) {\n    if (undirected) {\n      sourceData.undirectedSelfLoops++;\n      graph._undirectedSelfLoopCount++;\n    }\n    else {\n      sourceData.directedSelfLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  }\n  else {\n    if (undirected) {\n      sourceData.undirectedDegree++;\n      targetData.undirectedDegree++;\n    }\n    else {\n      sourceData.outDegree++;\n      targetData.inDegree++;\n    }\n  }\n\n  // Updating relevant index\n  updateStructureIndex(\n    graph,\n    undirected,\n    edgeData,\n    source,\n    target,\n    sourceData,\n    targetData\n  );\n\n  if (undirected)\n    graph._undirectedSize++;\n  else\n    graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return edge;\n}\n\n/**\n * Graph class\n *\n * @constructor\n * @param  {object}  [options] - Options:\n * @param  {boolean}   [allowSelfLoops] - Allow self loops?\n * @param  {string}    [type]           - Type of the graph.\n * @param  {boolean}   [map]            - Allow references as keys?\n * @param  {boolean}   [multi]          - Allow parallel edges?\n *\n * @throws {Error} - Will throw if the arguments are not valid.\n */\nexport default class Graph extends EventEmitter {\n  constructor(options) {\n    super();\n\n    //-- Solving options\n    options = assign({}, DEFAULTS, options);\n\n    // Enforcing options validity\n    if (options.edgeKeyGenerator && typeof options.edgeKeyGenerator !== 'function')\n      throw new InvalidArgumentsGraphError(`Graph.constructor: invalid 'edgeKeyGenerator' option. Expecting a function but got \"${options.edgeKeyGenerator}\".`);\n\n    if (typeof options.multi !== 'boolean')\n      throw new InvalidArgumentsGraphError(`Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"${options.multi}\".`);\n\n    if (!TYPES.has(options.type))\n      throw new InvalidArgumentsGraphError(`Graph.constructor: invalid 'type' option. Should be one of \"mixed\", \"directed\" or \"undirected\" but got \"${options.type}\".`);\n\n    if (typeof options.allowSelfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(`Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"${options.allowSelfLoops}\".`);\n\n    //-- Private properties\n\n    // Utilities\n    const NodeDataClass = options.type === 'mixed' ?\n      MixedNodeData :\n      (options.type === 'directed') ?\n        DirectedNodeData :\n        UndirectedNodeData;\n\n    privateProperty(this, 'NodeDataClass', NodeDataClass);\n\n    // Indexes\n    privateProperty(this, '_attributes', {});\n    privateProperty(this, '_nodes', new Map());\n    privateProperty(this, '_edges', new Map());\n    privateProperty(this, '_directedSize', 0);\n    privateProperty(this, '_undirectedSize', 0);\n    privateProperty(this, '_directedSelfLoopCount', 0);\n    privateProperty(this, '_undirectedSelfLoopCount', 0);\n    privateProperty(this, '_edgeKeyGenerator', options.edgeKeyGenerator || incrementalId());\n\n    // Options\n    privateProperty(this, '_options', options);\n\n    // Emitter properties\n    EMITTER_PROPS.forEach(prop => privateProperty(this, prop, this[prop]));\n\n    //-- Properties readers\n    readOnlyProperty(this, 'order', () => this._nodes.size);\n    readOnlyProperty(this, 'size', () => this._edges.size);\n    readOnlyProperty(this, 'directedSize', () => this._directedSize);\n    readOnlyProperty(this, 'undirectedSize', () => this._undirectedSize);\n    readOnlyProperty(this, 'selfLoopCount', () => this._directedSelfLoopCount + this._undirectedSelfLoopCount);\n    readOnlyProperty(this, 'directedSelfLoopCount', () => this._directedSelfLoopCount);\n    readOnlyProperty(this, 'undirectedSelfLoopCount', () => this._undirectedSelfLoopCount);\n    readOnlyProperty(this, 'multi', this._options.multi);\n    readOnlyProperty(this, 'type', this._options.type);\n    readOnlyProperty(this, 'allowSelfLoops', this._options.allowSelfLoops);\n    readOnlyProperty(this, 'implementation', () => 'graphology');\n  }\n\n  /**---------------------------------------------------------------------------\n   * Read\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning whether the given node is found in the graph.\n   *\n   * @param  {any}     node - The node.\n   * @return {boolean}\n   */\n  hasNode(node) {\n    return this._nodes.has('' + node);\n  }\n\n  /**\n   * Method returning whether the given directed edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasDirectedEdge(source, target) {\n\n    // Early termination\n    if (this.type === 'undirected')\n      return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return (\n        !!edgeData &&\n        !edgeData.undirected\n      );\n    }\n    else if (arguments.length === 2) {\n\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData)\n        return false;\n\n      // Is there a directed edge pointing toward target?\n      const edges = nodeData.out[target];\n\n      if (!edges)\n        return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(`Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`);\n  }\n\n  /**\n   * Method returning whether the given undirected edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasUndirectedEdge(source, target) {\n\n    // Early termination\n    if (this.type === 'directed')\n      return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return (\n        !!edgeData &&\n        edgeData.undirected\n      );\n    }\n    else if (arguments.length === 2) {\n\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData)\n        return false;\n\n      // Is there a directed edge pointing toward target?\n      const edges = nodeData.undirected[target];\n\n      if (!edges)\n        return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(`Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`);\n  }\n\n  /**\n   * Method returning whether the given edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasEdge(source, target) {\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      return this._edges.has(edge);\n    }\n    else if (arguments.length === 2) {\n\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData)\n        return false;\n\n      // Is there a directed edge pointing toward target?\n      let edges = typeof nodeData.out !== 'undefined' && nodeData.out[target];\n\n      if (!edges)\n        edges = typeof nodeData.undirected !== 'undefined' && nodeData.undirected[target];\n\n      if (!edges)\n        return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(`Graph.hasEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`);\n  }\n\n  /**\n   * Method returning the edge matching source & target in a directed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  directedEdge(source, target) {\n\n    if (this.type === 'undirected')\n      return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError('Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.');\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(`Graph.directedEdge: could not find the \"${source}\" source node in the graph.`);\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(`Graph.directedEdge: could not find the \"${target}\" target node in the graph.`);\n\n    const edgeData = (sourceData.out && sourceData.out[target]) || undefined;\n\n    if (edgeData)\n      return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a undirected fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  undirectedEdge(source, target) {\n\n    if (this.type === 'directed')\n      return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError('Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.');\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(`Graph.undirectedEdge: could not find the \"${source}\" source node in the graph.`);\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(`Graph.undirectedEdge: could not find the \"${target}\" target node in the graph.`);\n\n    const edgeData = (sourceData.undirected && sourceData.undirected[target]) || undefined;\n\n    if (edgeData)\n      return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a mixed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  edge(source, target) {\n    if (this.multi)\n      throw new UsageGraphError('Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.');\n\n    source = '' + source;\n    target = '' + target;\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(`Graph.edge: could not find the \"${source}\" source node in the graph.`);\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(`Graph.edge: could not find the \"${target}\" target node in the graph.`);\n\n    const edgeData = (\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]) ||\n      undefined\n    );\n\n    if (edgeData)\n      return edgeData.key;\n  }\n\n  /**\n   * Method returning the given node's in degree.\n   *\n   * @param  {any}     node      - The node's key.\n   * @param  {boolean} allowSelfLoops - Count self-loops?\n   * @return {number}            - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the selfLoops arg is not boolean.\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegree(node, selfLoops = true) {\n    if (typeof selfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(`Graph.inDegree: Expecting a boolean but got \"${selfLoops}\" for the second parameter (allowing self-loops to be counted).`);\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(`Graph.inDegree: could not find the \"${node}\" node in the graph.`);\n\n    if (this.type === 'undirected')\n      return 0;\n\n    const loops = selfLoops ? nodeData.directedSelfLoops : 0;\n\n    return nodeData.inDegree + loops;\n  }\n\n  /**\n   * Method returning the given node's out degree.\n   *\n   * @param  {any}     node      - The node's key.\n   * @param  {boolean} selfLoops - Count self-loops?\n   * @return {number}            - The node's out degree.\n   *\n   * @throws {Error} - Will throw if the selfLoops arg is not boolean.\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegree(node, selfLoops = true) {\n    if (typeof selfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(`Graph.outDegree: Expecting a boolean but got \"${selfLoops}\" for the second parameter (allowing self-loops to be counted).`);\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(`Graph.outDegree: could not find the \"${node}\" node in the graph.`);\n\n    if (this.type === 'undirected')\n      return 0;\n\n    const loops = selfLoops ? nodeData.directedSelfLoops : 0;\n\n    return nodeData.outDegree + loops;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node      - The node's key.\n   * @param  {boolean} selfLoops - Count self-loops?\n   * @return {number}            - The node's directed degree.\n   *\n   * @throws {Error} - Will throw if the selfLoops arg is not boolean.\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegree(node, selfLoops = true) {\n    if (typeof selfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(`Graph.directedDegree: Expecting a boolean but got \"${selfLoops}\" for the second parameter (allowing self-loops to be counted).`);\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(`Graph.directedDegree: could not find the \"${node}\" node in the graph.`);\n\n    if (this.type === 'undirected')\n      return 0;\n\n    const loops = selfLoops ? nodeData.directedSelfLoops : 0;\n\n    const inDegree = nodeData.inDegree + loops;\n    const outDegree = nodeData.outDegree + loops;\n\n    return inDegree + outDegree;\n  }\n\n  /**\n   * Method returning the given node's undirected degree.\n   *\n   * @param  {any}     node      - The node's key.\n   * @param  {boolean} selfLoops - Count self-loops?\n   * @return {number}            - The node's undirected degree.\n   *\n   * @throws {Error} - Will throw if the selfLoops arg is not boolean.\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegree(node, selfLoops = true) {\n    if (typeof selfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(`Graph.undirectedDegree: Expecting a boolean but got \"${selfLoops}\" for the second parameter (allowing self-loops to be counted).`);\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(`Graph.undirectedDegree: could not find the \"${node}\" node in the graph.`);\n\n    if (this.type === 'directed')\n      return 0;\n\n    const loops = selfLoops ? nodeData.undirectedSelfLoops : 0;\n\n    return nodeData.undirectedDegree + loops * 2;\n  }\n\n  /**\n   * Method returning the given node's degree.\n   *\n   * @param  {any}     node      - The node's key.\n   * @param  {boolean} selfLoops - Count self-loops?\n   * @return {number}            - The node's degree.\n   *\n   * @throws {Error} - Will throw if the selfLoops arg is not boolean.\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degree(node, selfLoops = true) {\n    if (typeof selfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(`Graph.degree: Expecting a boolean but got \"${selfLoops}\" for the second parameter (allowing self-loops to be counted).`);\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(`Graph.degree: could not find the \"${node}\" node in the graph.`);\n\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      if (selfLoops)\n        loops = nodeData.undirectedSelfLoops;\n\n      degree += nodeData.undirectedDegree + loops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      if (selfLoops)\n        loops = nodeData.directedSelfLoops;\n\n      degree += nodeData.inDegree + nodeData.outDegree + loops * 2;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given edge's source.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's source.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  source(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.source: could not find the \"${edge}\" edge in the graph.`);\n\n    return data.source.key;\n  }\n\n  /**\n   * Method returning the given edge's target.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's target.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  target(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.target: could not find the \"${edge}\" edge in the graph.`);\n\n    return data.target.key;\n  }\n\n  /**\n   * Method returning the given edge's extremities.\n   *\n   * @param  {any}   edge - The edge's key.\n   * @return {array}      - The edge's extremities.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  extremities(edge) {\n    edge = '' + edge;\n\n    const edgeData = this._edges.get(edge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(`Graph.extremities: could not find the \"${edge}\" edge in the graph.`);\n\n    return [\n      edgeData.source.key,\n      edgeData.target.key\n    ];\n  }\n\n  /**\n   * Given a node & an edge, returns the other extremity of the edge.\n   *\n   * @param  {any}   node - The node's key.\n   * @param  {any}   edge - The edge's key.\n   * @return {any}        - The related node.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph or if the\n   *                   edge & node are not related.\n   */\n  opposite(node, edge) {\n    node = '' + node;\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.opposite: could not find the \"${edge}\" edge in the graph.`);\n\n    const source = data.source.key,\n          target = data.target.key;\n\n    if (node !== source && node !== target)\n      throw new NotFoundGraphError(`Graph.opposite: the \"${node}\" node is not attached to the \"${edge}\" edge (${source}, ${target}).`);\n\n    return node === source ? target : source;\n  }\n\n  /**\n   * Returns whether the given edge has the given node as extremity.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @param  {any}     node - The node's key.\n   * @return {boolean}      - The related node.\n   *\n   * @throws {Error} - Will throw if either the node or the edge isn't in the graph.\n   */\n  hasExtremity(edge, node) {\n    edge = '' + edge;\n    node = '' + node;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.hasExtremity: could not find the \"${edge}\" edge in the graph.`);\n\n    return (\n      data.source.key === node ||\n      data.target.key === node\n    );\n  }\n\n  /**\n   * Method returning whether the given edge is undirected.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isUndirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.isUndirected: could not find the \"${edge}\" edge in the graph.`);\n\n    return data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is directed.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isDirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.isDirected: could not find the \"${edge}\" edge in the graph.`);\n\n    return !data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is a self loop.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isSelfLoop(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.isSelfLoop: could not find the \"${edge}\" edge in the graph.`);\n\n    return data.source === data.target;\n  }\n\n  /**\n   * Method returning whether the given edge has a generated key.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  hasGeneratedKey(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.hasGeneratedKey: could not find the \"${edge}\" edge in the graph.`);\n\n    return data.generatedKey;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Mutation\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to add a node to the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   *\n   * @throws {Error} - Will throw if the given node already exist.\n   * @throws {Error} - Will throw if the given attributes are not an object.\n   */\n  addNode(node, attributes) {\n    const nodeData = addNode(this, node, attributes);\n\n    return nodeData.key;\n  }\n\n  /**\n   * Method used to merge a node into the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   */\n  mergeNode(node, attributes) {\n    if (attributes && !isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(`Graph.mergeNode: invalid attributes. Expecting an object but got \"${attributes}\"`);\n\n    // String coercion\n    node = '' + node;\n    attributes = attributes || {};\n\n    // If the node already exists, we merge the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (attributes) {\n        assign(data.attributes, attributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'merge',\n          key: node,\n          attributes: data.attributes,\n          data: attributes\n        });\n      }\n      return node;\n    }\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return node;\n  }\n\n  /**\n   * Method used to add a node if it does not exist in the graph or else to\n   * update its attributes using a function.\n   *\n   * @param  {any}      node      - The node.\n   * @param  {function} [updater] - Optional updater function.\n   * @return {any}                - The node.\n   */\n  updateNode(node, updater) {\n    if (updater && typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(`Graph.updateNode: invalid updater function. Expecting a function but got \"${updater}\"`);\n\n    // String coercion\n    node = '' + node;\n\n    // If the node already exists, we update the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (updater) {\n        const oldAttributes = data.attributes;\n        data.attributes = updater(oldAttributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'replace',\n          key: node,\n          attributes: data.attributes\n        });\n      }\n      return node;\n    }\n\n    const attributes = updater ? updater({}) : {};\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return node;\n  }\n\n  /**\n   * Method used to drop a single node & all its attached edges from the graph.\n   *\n   * @param  {any}    node - The node.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node doesn't exist.\n   */\n  dropNode(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(`Graph.dropNode: could not find the \"${node}\" node in the graph.`);\n\n    // Removing attached edges\n    // TODO: we could do faster\n    this.forEachEdge(node, edge => {\n      this.dropEdge(edge);\n    });\n\n    // Dropping the node from the register\n    this._nodes.delete(node);\n\n    // Emitting\n    this.emit('nodeDropped', {\n      key: node,\n      attributes: nodeData.attributes\n    });\n  }\n\n  /**\n   * Method used to drop a single edge from the graph.\n   *\n   * Arity 1:\n   * @param  {any}    edge - The edge.\n   *\n   * Arity 2:\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropEdge(edge) {\n    let edgeData;\n\n    if (arguments.length > 1) {\n      const source = '' + arguments[0],\n            target = '' + arguments[1];\n\n      edgeData = getMatchingEdge(this, source, target, this.type);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(`Graph.dropEdge: could not find the \"${source}\" -> \"${target}\" edge in the graph.`);\n    }\n    else {\n      edge = '' + edge;\n\n      edgeData = this._edges.get(edge);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(`Graph.dropEdge: could not find the \"${edge}\" edge in the graph.`);\n    }\n\n    // Dropping the edge from the register\n    this._edges.delete(edgeData.key);\n\n    // Updating related degrees\n    const {\n      source: sourceData,\n      target: targetData,\n      attributes\n    } = edgeData;\n\n    const undirected = edgeData.undirected;\n\n    if (sourceData === targetData) {\n      if (undirected) {\n        sourceData.undirectedSelfLoops--;\n        this._undirectedSelfLoopCount--;\n      }\n      else {\n        sourceData.directedSelfLoops--;\n        this._directedSelfLoopCount--;\n      }\n    }\n    else {\n      if (undirected) {\n        sourceData.undirectedDegree--;\n        targetData.undirectedDegree--;\n      }\n      else {\n        sourceData.outDegree--;\n        targetData.inDegree--;\n      }\n    }\n\n    // Clearing index\n    clearEdgeFromStructureIndex(this, undirected, edgeData);\n\n    if (undirected)\n      this._undirectedSize--;\n    else\n      this._directedSize--;\n\n    // Emitting\n    this.emit('edgeDropped', {\n      key: edge,\n      attributes,\n      source: sourceData.key,\n      target: targetData.key,\n      undirected\n    });\n\n    return this;\n  }\n\n  /**\n   * Method used to remove every edge & every node from the graph.\n   *\n   * @return {Graph}\n   */\n  clear() {\n\n    // Clearing edges\n    this._edges.clear();\n\n    // Clearing nodes\n    this._nodes.clear();\n\n    // Emitting\n    this.emit('cleared');\n  }\n\n  /**\n   * Method used to remove every edge from the graph.\n   *\n   * @return {Graph}\n   */\n  clearEdges() {\n\n    // Clearing edges\n    this._edges.clear();\n\n    // Clearing indices\n    this.clearIndex();\n\n    // Emitting\n    this.emit('edgesCleared');\n  }\n\n  /**---------------------------------------------------------------------------\n   * Attributes-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning the desired graph's attribute.\n   *\n   * @param  {string} name - Name of the attribute.\n   * @return {any}\n   */\n  getAttribute(name) {\n    return this._attributes[name];\n  }\n\n  /**\n   * Method returning the graph's attributes.\n   *\n   * @return {object}\n   */\n  getAttributes() {\n    return this._attributes;\n  }\n\n  /**\n   * Method returning whether the graph has the desired attribute.\n   *\n   * @param  {string}  name - Name of the attribute.\n   * @return {boolean}\n   */\n  hasAttribute(name) {\n    return this._attributes.hasOwnProperty(name);\n  }\n\n  /**\n   * Method setting a value for the desired graph's attribute.\n   *\n   * @param  {string}  name  - Name of the attribute.\n   * @param  {any}     value - Value for the attribute.\n   * @return {Graph}\n   */\n  setAttribute(name, value) {\n    this._attributes[name] = value;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method using a function to update the desired graph's attribute's value.\n   *\n   * @param  {string}   name    - Name of the attribute.\n   * @param  {function} updater - Function use to update the attribute's value.\n   * @return {Graph}\n   */\n  updateAttribute(name, updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.updateAttribute: updater should be a function.');\n\n    const value = this._attributes[name];\n\n    this._attributes[name] = updater(value);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method removing the desired graph's attribute.\n   *\n   * @param  {string} name  - Name of the attribute.\n   * @return {Graph}\n   */\n  removeAttribute(name) {\n    delete this._attributes[name];\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'remove',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method replacing the graph's attributes.\n   *\n   * @param  {object} attributes - New attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  replaceAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError('Graph.replaceAttributes: provided attributes are not a plain object.');\n\n    this._attributes = attributes;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'replace',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method merging the graph's attributes.\n   *\n   * @param  {object} attributes - Attributes to merge.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  mergeAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError('Graph.mergeAttributes: provided attributes are not a plain object.');\n\n    assign(this._attributes, attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'merge',\n      attributes: this._attributes,\n      data: attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method returning the desired attribute for the given node.\n   *\n   * @param  {any}    node - Target node.\n   * @param  {string} name - Name of the attribute to get.\n   * @return {any}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  getNodeAttribute(node, name) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.getNodeAttribute: could not find the \"${node}\" node in the graph.`);\n\n    return data.attributes[name];\n  }\n\n  /**\n   * Method returning the attributes for the given node.\n   *\n   * @param  {any}    node - Target node.\n   * @return {object}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  getNodeAttributes(node) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.getNodeAttributes: could not find the \"${node}\" node in the graph.`);\n\n    return data.attributes;\n  }\n\n  /**\n   * Method checking whether the given attribute exists for the given node.\n   *\n   * @param  {any}    node - Target node.\n   * @param  {string} name - Name of the attribute to check.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  hasNodeAttribute(node, name) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.hasNodeAttribute: could not find the \"${node}\" node in the graph.`);\n\n    return data.attributes.hasOwnProperty(name);\n  }\n\n  /**\n   * Method checking setting the desired attribute for the given node.\n   *\n   * @param  {any}    node  - Target node.\n   * @param  {string} name  - Name of the attribute to set.\n   * @param  {any}    value - Value for the attribute.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if less than 3 arguments are passed.\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  setNodeAttribute(node, name, value) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.setNodeAttribute: could not find the \"${node}\" node in the graph.`);\n\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError('Graph.setNodeAttribute: not enough arguments. Either you forgot to pass the attribute\\'s name or value, or you meant to use #.replaceNodeAttributes / #.mergeNodeAttributes instead.');\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method checking setting the desired attribute for the given node.\n   *\n   * @param  {any}      node    - Target node.\n   * @param  {string}   name    - Name of the attribute to set.\n   * @param  {function} updater - Function that will update the attribute.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if less than 3 arguments are passed.\n   * @throws {Error} - Will throw if updater is not a function.\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  updateNodeAttribute(node, name, updater) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.updateNodeAttribute: could not find the \"${node}\" node in the graph.`);\n\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError('Graph.updateNodeAttribute: not enough arguments. Either you forgot to pass the attribute\\'s name or updater, or you meant to use #.replaceNodeAttributes / #.mergeNodeAttributes instead.');\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.updateAttribute: updater should be a function.');\n\n    const attributes = data.attributes;\n    const value = updater(attributes[name]);\n\n    attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method removing the desired attribute for the given node.\n   *\n   * @param  {any}    node  - Target node.\n   * @param  {string} name  - Name of the attribute to remove.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  removeNodeAttribute(node, name) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.hasNodeAttribute: could not find the \"${node}\" node in the graph.`);\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method completely replacing the attributes of the given node.\n   *\n   * @param  {any}    node       - Target node.\n   * @param  {object} attributes - New attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   * @throws {Error} - Will throw if the given attributes is not a plain object.\n   */\n  replaceNodeAttributes(node, attributes) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.replaceNodeAttributes: could not find the \"${node}\" node in the graph.`);\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError('Graph.replaceNodeAttributes: provided attributes are not a plain object.');\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method merging the attributes of the given node with the provided ones.\n   *\n   * @param  {any}    node       - Target node.\n   * @param  {object} attributes - Attributes to merge.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   * @throws {Error} - Will throw if the given attributes is not a plain object.\n   */\n  mergeNodeAttributes(node, attributes) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.mergeNodeAttributes: could not find the \"${node}\" node in the graph.`);\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError('Graph.mergeNodeAttributes: provided attributes are not a plain object.');\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method used to update each node's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachNodeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.updateEachNodeAttributes: expecting an updater function.');\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError('Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}');\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while ((step = iterator.next(), step.done !== true)) {\n      nodeData = step.value;\n      nodeData.attributes = updater(nodeData.key, nodeData.attributes);\n    }\n\n    this.emit('eachNodeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**\n   * Method used to update each edge's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachEdgeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.updateEachEdgeAttributes: expecting an updater function.');\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError('Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}');\n\n    const iterator = this._edges.values();\n\n    let step, edgeData;\n\n    while ((step = iterator.next(), step.done !== true)) {\n      edgeData = step.value;\n      edgeData.attributes = updater(edgeData.key, edgeData.attributes);\n    }\n\n    this.emit('eachEdgeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Iteration-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method iterating over the graph's adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEach(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.forEach: expecting a callback.');\n\n    if (this.multi)\n      forEachAdjacencyMulti(false, this, callback);\n    else\n      forEachAdjacencySimple(false, this, callback);\n  }\n\n  /**\n   * Method iterating over the graph's adjacency using the given callback until\n   * it returns a truthy value to stop iteration.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEachUntil(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.forEach: expecting a callback.');\n\n    if (this.multi)\n      forEachAdjacencyMulti(true, this, callback);\n    else\n      forEachAdjacencySimple(true, this, callback);\n  }\n\n  /**\n   * Method returning an iterator over the graph's adjacency.\n   *\n   * @return {Iterator}\n   */\n  adjacency() {\n    if (this.multi)\n      return createAdjacencyIteratorMulti(this);\n\n    return createAdjacencyIteratorSimple(this);\n  }\n\n  /**\n   * Method returning the list of the graph's nodes.\n   *\n   * @return {array} - The nodes.\n   */\n  nodes() {\n    if (typeof Array.from === 'function')\n      return Array.from(this._nodes.keys());\n\n    return take(this._nodes.keys(), this._nodes.size);\n  }\n\n  /**\n   * Method iterating over the graph's nodes using the given callback.\n   *\n   * @param  {function}  callback - Callback (key, attributes, index).\n   */\n  forEachNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.forEachNode: expecting a callback.');\n\n    this._nodes.forEach((data, key) => {\n      callback(key, data.attributes);\n    });\n  }\n\n  /**\n   * Method iterating over the graph's nodes using the given callback until\n   * it returns a truthy value to stop iteration.\n   *\n   * @param  {function}  callback - Callback (key, attributes, index).\n   */\n  forEachNodeUntil(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.forEachNode: expecting a callback.');\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData, shouldBreak;\n\n    while ((step = iterator.next(), step !== true)) {\n      nodeData = step.value;\n\n      shouldBreak = callback(nodeData.key, nodeData.attributes);\n\n      if (shouldBreak)\n        break;\n    }\n  }\n\n  /**\n   * Method returning an iterator over the graph's node entries.\n   *\n   * @return {Iterator}\n   */\n  nodeEntries() {\n    const iterator = this._nodes.values();\n\n    return new Iterator(() => {\n      const step = iterator.next();\n\n      if (step.done)\n        return step;\n\n      const data = step.value;\n\n      return {value: [data.key, data.attributes], done: false};\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Serialization\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method exporting the target node.\n   *\n   * @param  {any}   node - Target node.\n   * @return {array}      - The serialized node.\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  exportNode(node) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.exportNode: could not find the \"${node}\" node in the graph.`);\n\n    return serializeNode(node, data);\n  }\n\n  /**\n   * Method exporting the target edge.\n   *\n   * @param  {any}   edge - Target edge.\n   * @return {array}      - The serialized edge.\n   *\n   * @throws {Error} - Will throw if the edge is not found.\n   */\n  exportEdge(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.exportEdge: could not find the \"${edge}\" edge in the graph.`);\n\n    return serializeEdge(edge, data);\n  }\n\n  /**\n   * Method used to export the whole graph.\n   *\n   * @return {object} - The serialized graph.\n   */\n  export() {\n\n    const nodes = new Array(this._nodes.size);\n\n    let i = 0;\n\n    this._nodes.forEach((data, key) => {\n      nodes[i++] = serializeNode(key, data);\n    });\n\n    const edges = new Array(this._edges.size);\n\n    i = 0;\n\n    this._edges.forEach((data, key) => {\n      edges[i++] = serializeEdge(key, data);\n    });\n\n    return {\n      attributes: this.getAttributes(),\n      nodes,\n      edges,\n      options: {\n        type: this.type,\n        multi: this.multi,\n        allowSelfLoops: this.allowSelfLoops\n      }\n    };\n  }\n\n  /**\n   * Method used to import a serialized node.\n   *\n   * @param  {object} data   - The serialized node.\n   * @param  {boolean} merge - Whether to merge the given node.\n   * @return {Graph}         - Returns itself for chaining.\n   */\n  importNode(data, merge = false) {\n\n    // Validating\n    const error = validateSerializedNode(data);\n\n    if (error) {\n\n      if (error === 'not-object')\n        throw new InvalidArgumentsGraphError('Graph.importNode: invalid serialized node. A serialized node should be a plain object with at least a \"key\" property.');\n      if (error === 'no-key')\n        throw new InvalidArgumentsGraphError('Graph.importNode: no key provided.');\n      if (error === 'invalid-attributes')\n        throw new InvalidArgumentsGraphError('Graph.importNode: invalid attributes. Attributes should be a plain object, null or omitted.');\n    }\n\n    // Adding the node\n    const {key, attributes = {}} = data;\n\n    if (merge)\n      this.mergeNode(key, attributes);\n    else\n      this.addNode(key, attributes);\n\n    return this;\n  }\n\n  /**\n   * Method used to import a serialized edge.\n   *\n   * @param  {object}  data  - The serialized edge.\n   * @param  {boolean} merge - Whether to merge the given edge.\n   * @return {Graph}         - Returns itself for chaining.\n   */\n  importEdge(data, merge = false) {\n\n    // Validating\n    const error = validateSerializedEdge(data);\n\n    if (error) {\n\n      if (error === 'not-object')\n        throw new InvalidArgumentsGraphError('Graph.importEdge: invalid serialized edge. A serialized edge should be a plain object with at least a \"source\" & \"target\" property.');\n      if (error === 'no-source')\n        throw new InvalidArgumentsGraphError('Graph.importEdge: missing souce.');\n      if (error === 'no-target')\n        throw new InvalidArgumentsGraphError('Graph.importEdge: missing target.');\n      if (error === 'invalid-attributes')\n        throw new InvalidArgumentsGraphError('Graph.importEdge: invalid attributes. Attributes should be a plain object, null or omitted.');\n      if (error === 'invalid-undirected')\n        throw new InvalidArgumentsGraphError('Graph.importEdge: invalid undirected. Undirected should be boolean or omitted.');\n    }\n\n    // Adding the edge\n    const {\n      source,\n      target,\n      attributes = {},\n      undirected = false\n    } = data;\n\n    let method;\n\n    if ('key' in data) {\n      method = merge ?\n        (undirected ? this.mergeUndirectedEdgeWithKey : this.mergeDirectedEdgeWithKey) :\n        (undirected ? this.addUndirectedEdgeWithKey : this.addDirectedEdgeWithKey);\n\n      method.call(\n        this,\n        data.key,\n        source,\n        target,\n        attributes\n      );\n    }\n    else {\n      method = merge ?\n        (undirected ? this.mergeUndirectedEdge : this.mergeDirectedEdge) :\n        (undirected ? this.addUndirectedEdge : this.addDirectedEdge);\n\n      method.call(\n        this,\n        source,\n        target,\n        attributes\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Method used to import a serialized graph.\n   *\n   * @param  {object|Graph} data  - The serialized graph.\n   * @param  {boolean}      merge - Whether to merge data.\n   * @return {Graph}              - Returns itself for chaining.\n   */\n  import(data, merge = false) {\n\n    // Importing a Graph instance\n    if (isGraph(data)) {\n\n      this.import(data.export(), merge);\n      return this;\n    }\n\n    // Importing a serialized graph\n    if (!isPlainObject(data))\n      throw new InvalidArgumentsGraphError('Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.');\n\n    if (data.attributes) {\n      if (!isPlainObject(data.attributes))\n        throw new InvalidArgumentsGraphError('Graph.import: invalid attributes. Expecting a plain object.');\n\n      if (merge)\n        this.mergeAttributes(data.attributes);\n      else\n        this.replaceAttributes(data.attributes);\n    }\n\n    let i, l, list;\n\n    if (data.nodes) {\n      list = data.nodes;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError('Graph.import: invalid nodes. Expecting an array.');\n\n\n      for (i = 0, l = list.length; i < l; i++)\n        this.importNode(list[i], merge);\n    }\n\n    if (data.edges) {\n      list = data.edges;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError('Graph.import: invalid edges. Expecting an array.');\n\n      for (i = 0, l = list.length; i < l; i++)\n        this.importEdge(list[i], merge);\n    }\n\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Utils\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning a null copy of the graph, i.e. a graph without nodes\n   * & edges but with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The null copy.\n   */\n  nullCopy(options) {\n    return new Graph(assign({}, this._options, options));\n  }\n\n  /**\n   * Method returning an empty copy of the graph, i.e. a graph without edges but\n   * with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The empty copy.\n   */\n  emptyCopy(options) {\n    const graph = this.nullCopy(options);\n\n    this._nodes.forEach((nodeData, key) => {\n      const attributes = assign({}, nodeData.attributes);\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      nodeData = new graph.NodeDataClass(key, attributes);\n      graph._nodes.set(key, nodeData);\n    });\n\n    return graph;\n  }\n\n  /**\n   * Method returning an exact copy of the graph.\n   *\n   * @return {Graph} - The copy.\n   */\n  copy() {\n    const graph = new Graph(this._options);\n    graph.import(this);\n\n    return graph;\n  }\n\n  /**\n   * Method upgrading the graph to a mixed one.\n   *\n   * @return {Graph} - The copy.\n   */\n  upgradeToMixed() {\n    if (this.type === 'mixed')\n      return this;\n\n    // Upgrading node data:\n    // NOTE: maybe this could lead to some de-optimization by usual\n    // JavaScript engines but I cannot be sure of it. Another solution\n    // would be to reinstantiate the classes but this surely has a performance\n    // and memory impact.\n    this._nodes.forEach(data => (data.upgradeToMixed()));\n\n    // Mutating the options & the instance\n    this._options.type = 'mixed';\n    readOnlyProperty(this, 'type', this._options.type);\n    privateProperty(this, 'NodeDataClass', MixedNodeData);\n\n    return this;\n  }\n\n  /**\n   * Method upgrading the graph to a multi one.\n   *\n   * @return {Graph} - The copy.\n   */\n  upgradeToMulti() {\n    if (this.multi)\n      return this;\n\n    // Mutating the options & the instance\n    this._options.multi = true;\n    readOnlyProperty(this, 'multi', true);\n\n    // Upgrading indices\n    upgradeStructureIndexToMulti(this);\n\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Indexes-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to clear the desired index to clear memory.\n   *\n   * @return {Graph}       - Returns itself for chaining.\n   */\n  clearIndex() {\n    clearStructureIndex(this);\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Known methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used by JavaScript to perform JSON serialization.\n   *\n   * @return {object} - The serialized graph.\n   */\n  toJSON() {\n    return this.export();\n  }\n\n  /**\n   * Method returning [object Graph].\n   */\n  toString() {\n    return '[object Graph]';\n  }\n\n  /**\n   * Method used internally by node's console to display a custom object.\n   *\n   * @return {object} - Formatted object representation of the graph.\n   */\n  inspect() {\n    const nodes = {};\n    this._nodes.forEach((data, key) => {\n      nodes[key] = data.attributes;\n    });\n\n    const edges = {},\n          multiIndex = {};\n\n    this._edges.forEach((data, key) => {\n      const direction = data.undirected ? '--' : '->';\n\n      let label = '';\n\n      const desc = `(${data.source.key})${direction}(${data.target.key})`;\n\n      if (!data.generatedKey) {\n        label += `[${key}]: `;\n      }\n      else if (this.multi) {\n        if (typeof multiIndex[desc] === 'undefined') {\n          multiIndex[desc] = 0;\n        }\n        else {\n          multiIndex[desc]++;\n        }\n\n        label += `${multiIndex[desc]}. `;\n      }\n\n      label += desc;\n\n      edges[label] = data.attributes;\n    });\n\n    const dummy = {};\n\n    for (const k in this) {\n      if (this.hasOwnProperty(k) &&\n          !EMITTER_PROPS.has(k) &&\n          typeof this[k] !== 'function')\n        dummy[k] = this[k];\n    }\n\n    dummy.attributes = this._attributes;\n    dummy.nodes = nodes;\n    dummy.edges = edges;\n\n    privateProperty(dummy, 'constructor', this.constructor);\n\n    return dummy;\n  }\n}\n\n/**\n * Attaching custom inspect method for node >= 10.\n */\nif (typeof Symbol !== 'undefined')\n  Graph.prototype[Symbol.for('nodejs.util.inspect.custom')] = Graph.prototype.inspect;\n\n/**\n * Attaching methods to the prototype.\n *\n * Here, we are attaching a wide variety of methods to the Graph class'\n * prototype when those are very numerous and when their creation is\n * abstracted.\n */\n\n/**\n * Related to edge addition.\n */\nEDGE_ADD_METHODS.forEach(method => {\n  ['add', 'merge', 'update'].forEach(verb => {\n    const name = method.name(verb),\n          fn = verb === 'add' ? addEdge : mergeEdge;\n\n    if (method.generateKey) {\n      Graph.prototype[name] = function(source, target, attributes) {\n        return fn(\n          this,\n          name,\n          true,\n          (method.type || this.type) === 'undirected',\n          null,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    }\n    else {\n      Graph.prototype[name] = function(edge, source, target, attributes) {\n        return fn(\n          this,\n          name,\n          false,\n          (method.type || this.type) === 'undirected',\n          edge,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    }\n  });\n});\n\n/**\n * Self iterator.\n */\nif (typeof Symbol !== 'undefined')\n  Graph.prototype[Symbol.iterator] = Graph.prototype.adjacency;\n\n/**\n * Attributes-related.\n */\nattachAttributesMethods(Graph);\n\n/**\n * Edge iteration-related.\n */\nattachEdgeIterationMethods(Graph);\n\n/**\n * Neighbor iteration-related.\n */\nattachNeighborIterationMethods(Graph);\n","/**\n * Graphology Helper Classes\n * ==========================\n *\n * Building some higher-order classes instantiating the graph with\n * predefinite options.\n */\nimport {assign} from './utils';\nimport Graph from './graph';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\n/**\n * Alternative constructors.\n */\nclass DirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError('DirectedGraph.from: inconsistent indication that the graph should be multi in given options!');\n\n    if (finalOptions.type !== 'directed')\n    throw new InvalidArgumentsGraphError('DirectedGraph.from: inconsistent \"' + finalOptions.type + '\" type in given options!');\n\n    super(finalOptions);\n  }\n}\nclass UndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError('UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!');\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError('UndirectedGraph.from: inconsistent \"' + finalOptions.type + '\" type in given options!');\n\n    super(finalOptions);\n  }\n}\nclass MultiGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError('MultiGraph.from: inconsistent indication that the graph should be simple in given options!');\n\n    super(finalOptions);\n  }\n}\nclass MultiDirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError('MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!');\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError('MultiDirectedGraph.from: inconsistent \"' + finalOptions.type + '\" type in given options!');\n\n    super(finalOptions);\n  }\n}\nclass MultiUndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError('MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!');\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError('MultiUndirectedGraph.from: inconsistent \"' + finalOptions.type + '\" type in given options!');\n\n    super(finalOptions);\n  }\n}\n\n/**\n * Attaching static #.from method to each of the constructors.\n */\nfunction attachStaticFromMethod(Class) {\n\n  /**\n   * Builds a graph from serialized data or another graph's data.\n   *\n   * @param  {Graph|SerializedGraph} data      - Hydratation data.\n   * @param  {object}                [options] - Options.\n   * @return {Class}\n   */\n  Class.from = function(data, options) {\n\n    // Merging given options with serialized ones\n    const finalOptions = assign({}, data.options, options);\n\n    const instance = new Class(finalOptions);\n    instance.import(data);\n\n    return instance;\n  };\n}\n\nattachStaticFromMethod(Graph);\nattachStaticFromMethod(DirectedGraph);\nattachStaticFromMethod(UndirectedGraph);\nattachStaticFromMethod(MultiGraph);\nattachStaticFromMethod(MultiDirectedGraph);\nattachStaticFromMethod(MultiUndirectedGraph);\n\nGraph.Graph = Graph;\nGraph.DirectedGraph = DirectedGraph;\nGraph.UndirectedGraph = UndirectedGraph;\nGraph.MultiGraph = MultiGraph;\nGraph.MultiDirectedGraph = MultiDirectedGraph;\nGraph.MultiUndirectedGraph = MultiUndirectedGraph;\n\nGraph.InvalidArgumentsGraphError = InvalidArgumentsGraphError;\nGraph.NotFoundGraphError = NotFoundGraphError;\nGraph.UsageGraphError = UsageGraphError;\n\nexport {\n  Graph,\n  DirectedGraph,\n  UndirectedGraph,\n  MultiGraph,\n  MultiDirectedGraph,\n  MultiUndirectedGraph\n};\n","/**\n * Graphology CommonJS Endoint\n * ============================\n *\n * Endpoint for CommonJS modules consumers.\n */\nimport {Graph} from './classes';\n\nexport default Graph;\n"],"names":["assignPolyfill","target","arguments","i","l","length","k","assign","Object","getMatchingEdge","graph","source","type","sourceData","_nodes","get","edge","out","undirected","isGraph","value","addUndirectedEdgeWithKey","dropNode","isPlainObject","constructor","isEmpty","o","privateProperty","name","defineProperty","enumerable","configurable","writable","readOnlyProperty","descriptor","validateHints","hints","attributes","Array","isArray","incrementalId","GraphError","message","data","Error","InvalidArgumentsGraphError","captureStackTrace","prototype","NotFoundGraphError","UsageGraphError","MixedNodeData","key","inDegree","outDegree","undirectedDegree","directedSelfLoops","undirectedSelfLoops","DirectedNodeData","upgradeToMixed","UndirectedNodeData","EdgeData","generatedKey","updateStructureIndex","edgeData","targetData","multi","outKey","inKey","adj","container","Set","add","clearEdgeFromStructureIndex","sourceIndex","set","size","targetIndex","clearStructureIndex","forEach","upgradeStructureIndexToMulti","node","neighbor","edges","attachAttributeGetter","Class","method","element","_edges","attachAttributesGetter","attachAttributeChecker","hasOwnProperty","attachAttributeSetter","emit","attachAttributeUpdater","updater","attachAttributeRemover","attachAttributesReplacer","attachAttributesMerger","ATTRIBUTES_METHODS","attacher","attachAttributesMethods","Graph","Iterator","EDGES_ITERATION","direction","collectSimple","object","push","collectMulti","forEachSimple","callback","avoid","forEachMulti","forEachSimpleUntil","shouldBreak","forEachMultiUntil","iterator","step","values","next","done","createIterator","keys","inner","collectForKeySimple","collectForKeyMulti","edgesData","forEachForKeySimple","forEachForKeyMulti","forEachForKeySimpleUntil","forEachForKeyMultiUntil","createIteratorForKey","v","of","createEdgeArray","from","take","undirectedSize","directedSize","list","mask","forEachEdge","shouldFilter","forEachEdgeUntil","createEdgeIterator","empty","createEdgeArrayForNode","nodeData","fn","splice","lastIndexOf","forEachEdgeForNode","forEachEdgeForNodeUntil","createEdgeIteratorForNode","chain","createEdgeArrayForPath","forEachEdgeForPath","forEachEdgeForPathUntil","createEdgeIteratorForPath","attachEdgeArrayCreator","description","has","attachForEachEdge","forEachName","toUpperCase","slice","attachForEachEdgeUntil","forEachUntilName","attachEdgeIteratorCreator","originalName","attachEdgeIterationMethods","NEIGHBORS_ITERATION","merge","neighbors","createNeighborArrayForNode","forEachInObject","neighborData","forEachInObjectOnce","visited","forEachInObjectUntil","forEachInObjectOnceUntil","forEachNeighborForNode","forEachNeighborForNodeUntil","createObjectIterator","createDedupedObjectIterator","createNeighborIterator","nodeHasNeighbor","attachNeighborArrayCreator","node1","node2","attachForEachNeighbor","attachForEachNeighborUntil","attachNeighborIteratorCreator","iteratorName","attachNeighborIterationMethods","forEachAdjacencySimple","breakable","forEachAdjacencyMulti","containerStep","createAdjacencyIteratorSimple","state","offset","createAdjacencyIteratorMulti","serializeNode","serialized","serializeEdge","validateSerializedNode","validateSerializedEdge","TYPES","EMITTER_PROPS","EDGE_ADD_METHODS","verb","generateKey","DEFAULTS","allowSelfLoops","edgeKeyGenerator","addNode","NodeDataClass","unsafeAddNode","addEdge","mustGenerateKey","eventData","_edgeKeyGenerator","_undirectedSelfLoopCount","_directedSelfLoopCount","_undirectedSize","_directedSize","mergeEdge","asUpdater","undefined","alreadyExistingEdgeData","oldAttributes","options","Map","prop","_options","hasNode","hasDirectedEdge","hasUndirectedEdge","hasEdge","directedEdge","undirectedEdge","selfLoops","loops","directedDegree","degree","extremities","opposite","hasExtremity","isUndirected","isDirected","isSelfLoop","hasGeneratedKey","mergeNode","updateNode","dropEdge","clear","clearEdges","clearIndex","getAttribute","_attributes","getAttributes","hasAttribute","setAttribute","updateAttribute","removeAttribute","replaceAttributes","mergeAttributes","getNodeAttribute","getNodeAttributes","hasNodeAttribute","setNodeAttribute","updateNodeAttribute","removeNodeAttribute","replaceNodeAttributes","mergeNodeAttributes","updateEachNodeAttributes","updateEachEdgeAttributes","forEachUntil","adjacency","nodes","forEachNode","forEachNodeUntil","nodeEntries","exportNode","exportEdge","importNode","error","importEdge","mergeUndirectedEdgeWithKey","mergeDirectedEdgeWithKey","addDirectedEdgeWithKey","call","mergeUndirectedEdge","mergeDirectedEdge","addUndirectedEdge","addDirectedEdge","nullCopy","emptyCopy","copy","upgradeToMulti","toJSON","toString","inspect","multiIndex","label","desc","dummy","EventEmitter","Symbol","DirectedGraph","finalOptions","UndirectedGraph","MultiGraph","MultiDirectedGraph","MultiUndirectedGraph","attachStaticFromMethod","instance"],"mappings":"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"}