{"version":3,"file":"graphology.umd.min.js","sources":["../src/utils.js","../node_modules/events/events.js","../node_modules/obliterator/iterator.js","../node_modules/obliterator/take.js","../src/errors.js","../src/data.js","../src/indices.js","../src/attributes.js","../node_modules/obliterator/chain.js","../src/iteration/edges.js","../src/iteration/neighbors.js","../src/iteration/adjacency.js","../src/serialization.js","../src/graph.js","../src/classes.js"],"sourcesContent":["/**\n * Graphology Utilities\n * =====================\n *\n * Collection of helpful functions used by the implementation.\n */\n\n/**\n * Object.assign-like polyfill.\n *\n * @param  {object} target       - First object.\n * @param  {object} [...objects] - Objects to merge.\n * @return {object}\n */\nfunction assignPolyfill() {\n  const target = arguments[0];\n\n  for (let i = 1, l = arguments.length; i < l; i++) {\n    if (!arguments[i])\n      continue;\n\n    for (const k in arguments[i])\n      target[k] = arguments[i][k];\n  }\n\n  return target;\n}\n\nlet assign = assignPolyfill;\n\nif (typeof Object.assign === 'function')\n  assign = Object.assign;\n\nexport {assign};\n\n/**\n * Function returning the first matching edge for given path.\n * Note: this function does not check the existence of source & target. This\n * must be performed by the caller.\n *\n * @param  {Graph}  graph  - Target graph.\n * @param  {any}    source - Source node.\n * @param  {any}    target - Target node.\n * @param  {string} type   - Type of the edge (mixed, directed or undirected).\n * @return {string|null}\n */\nexport function getMatchingEdge(graph, source, target, type) {\n  const sourceData = graph._nodes.get(source);\n\n  let edge = null;\n\n  if (!sourceData)\n    return edge;\n\n  if (type === 'mixed') {\n    edge = (\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target])\n    );\n  }\n  else if (type === 'directed') {\n    edge = sourceData.out && sourceData.out[target];\n  }\n  else {\n    edge = sourceData.undirected && sourceData.undirected[target];\n  }\n\n  return edge;\n}\n\n/**\n * Checks whether the given value is a Graph implementation instance.\n *\n * @param  {mixed}   value - Target value.\n * @return {boolean}\n */\nexport function isGraph(value) {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.addUndirectedEdgeWithKey === 'function' &&\n    typeof value.dropNode === 'function'\n  );\n}\n\n/**\n * Checks whether the given value is a plain object.\n *\n * @param  {mixed}   value - Target value.\n * @return {boolean}\n */\nexport function isPlainObject(value) {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    value.constructor === Object\n  );\n}\n\n/**\n * Checks whether the given object is empty.\n *\n * @param  {object}  o - Target Object.\n * @return {boolean}\n */\nexport function isEmpty(o) {\n  let k;\n\n  for (k in o)\n    return false;\n\n  return true;\n}\n\n/**\n * Creates a \"private\" property for the given member name by concealing it\n * using the `enumerable` option.\n *\n * @param {object} target - Target object.\n * @param {string} name   - Member name.\n */\nexport function privateProperty(target, name, value) {\n  Object.defineProperty(target, name, {\n    enumerable: false,\n    configurable: false,\n    writable: true,\n    value\n  });\n}\n\n\n/**\n * Creates a read-only property for the given member name & the given getter.\n *\n * @param {object}   target - Target object.\n * @param {string}   name   - Member name.\n * @param {mixed}    value  - The attached getter or fixed value.\n */\nexport function readOnlyProperty(target, name, value) {\n  const descriptor = {\n    enumerable: true,\n    configurable: true\n  };\n\n  if (typeof value === 'function') {\n    descriptor.get = value;\n  }\n  else {\n    descriptor.value = value;\n    descriptor.writable = false;\n  }\n\n  Object.defineProperty(target, name, descriptor);\n}\n\n/**\n * Returns whether the given object constitute valid hints.\n *\n * @param {object} hints - Target object.\n */\nexport function validateHints(hints) {\n  if (!isPlainObject(hints))\n    return false;\n\n  if (hints.attributes && !Array.isArray(hints.attributes))\n    return false;\n\n  return true;\n}\n\n/**\n * Creates a function generating incremental ids for edges.\n *\n * @return {function}\n */\nexport function incrementalId() {\n  let i = 0;\n\n  return () => {\n    return `_geid${i++}_`;\n  };\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function eventListener() {\n      if (errorListener !== undefined) {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n    var errorListener;\n\n    // Adding an error listener is not optional because\n    // if an error is thrown on an event emitter we cannot\n    // guarantee that the actual event we are waiting will\n    // be fired. The result could be a silent way to create\n    // memory or file descriptor leaks, which is something\n    // we should avoid.\n    if (name !== 'error') {\n      errorListener = function errorListener(err) {\n        emitter.removeListener(name, eventListener);\n        reject(err);\n      };\n\n      emitter.once('error', errorListener);\n    }\n\n    emitter.once(name, eventListener);\n  });\n}\n","/**\n * Obliterator Iterator Class\n * ===========================\n *\n * Simple class representing the library's iterators.\n */\n\n/**\n * Iterator class.\n *\n * @constructor\n * @param {function} next - Next function.\n */\nfunction Iterator(next) {\n\n  // Hiding the given function\n  Object.defineProperty(this, '_next', {\n    writable: false,\n    enumerable: false,\n    value: next\n  });\n\n  // Is the iterator complete?\n  this.done = false;\n}\n\n/**\n * Next function.\n *\n * @return {object}\n */\n// NOTE: maybe this should dropped for performance?\nIterator.prototype.next = function() {\n  if (this.done)\n    return {done: true};\n\n  var step = this._next();\n\n  if (step.done)\n    this.done = true;\n\n  return step;\n};\n\n/**\n * If symbols are supported, we add `next` to `Symbol.iterator`.\n */\nif (typeof Symbol !== 'undefined')\n  Iterator.prototype[Symbol.iterator] = function() {\n    return this;\n  };\n\n/**\n * Returning an iterator of the given values.\n *\n * @param  {any...} values - Values.\n * @return {Iterator}\n */\nIterator.of = function() {\n  var args = arguments,\n      l = args.length,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {done: true};\n\n    return {done: false, value: args[i++]};\n  });\n};\n\n/**\n * Returning an empty iterator.\n *\n * @return {Iterator}\n */\nIterator.empty = function() {\n  var iterator = new Iterator(null);\n  iterator.done = true;\n\n  return iterator;\n};\n\n/**\n * Returning whether the given value is an iterator.\n *\n * @param  {any} value - Value.\n * @return {boolean}\n */\nIterator.is = function(value) {\n  if (value instanceof Iterator)\n    return true;\n\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.next === 'function'\n  );\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Iterator;\n","/* eslint no-constant-condition: 0 */\n/**\n * Obliterator Take Function\n * ==========================\n *\n * Function taking n or every value of the given iterator and returns them\n * into an array.\n */\n\n/**\n * Take.\n *\n * @param  {Iterator} iterator - Target iterator.\n * @param  {number}   [n]      - Optional number of items to take.\n * @return {array}\n */\nmodule.exports = function take(iterator, n) {\n  var l = arguments.length > 1 ? n : Infinity,\n      array = l !== Infinity ? new Array(l) : [],\n      step,\n      i = 0;\n\n  while (true) {\n\n    if (i === l)\n      return array;\n\n    step = iterator.next();\n\n    if (step.done) {\n\n      if (i !== n)\n        return array.slice(0, i);\n\n      return array;\n    }\n\n    array[i++] = step.value;\n  }\n};\n","/**\n * Graphology Custom Errors\n * =========================\n *\n * Defining custom errors for ease of use & easy unit tests across\n * implementations (normalized typology rather than relying on error\n * messages to check whether the correct error was found).\n */\nexport class GraphError extends Error {\n  constructor(message, data) {\n    super();\n    this.name = 'GraphError';\n    this.message = message || '';\n    this.data = data || {};\n  }\n}\n\nexport class InvalidArgumentsGraphError extends GraphError {\n  constructor(message, data) {\n    super(message, data);\n    this.name = 'InvalidArgumentsGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, InvalidArgumentsGraphError.prototype.constructor);\n  }\n}\n\nexport class NotFoundGraphError extends GraphError {\n  constructor(message, data) {\n    super(message, data);\n    this.name = 'NotFoundGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, NotFoundGraphError.prototype.constructor);\n  }\n}\n\nexport class UsageGraphError extends GraphError {\n  constructor(message, data) {\n    super(message, data);\n    this.name = 'UsageGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, UsageGraphError.prototype.constructor);\n  }\n}\n","/**\n * Graphology Internal Data Classes\n * =================================\n *\n * Internal classes hopefully reduced to structs by engines & storing\n * necessary information for nodes & edges.\n *\n * Note that those classes don't rely on the `class` keyword to avoid some\n * cruft introduced by most of ES2015 transpilers.\n */\n\n/**\n * MixedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function MixedNodeData(key, attributes) {\n\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.undirectedDegree = 0;\n  this.directedSelfLoops = 0;\n  this.undirectedSelfLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n  this.undirected = {};\n}\n\n/**\n * DirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function DirectedNodeData(key, attributes) {\n\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.directedSelfLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n}\n\nDirectedNodeData.prototype.upgradeToMixed = function() {\n\n  // Degrees\n  this.undirectedDegree = 0;\n  this.undirectedSelfLoops = 0;\n\n  // Indices\n  this.undirected = {};\n};\n\n\n/**\n * UndirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function UndirectedNodeData(key, attributes) {\n\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  // Degrees\n  this.undirectedDegree = 0;\n  this.undirectedSelfLoops = 0;\n\n  // Indices\n  this.undirected = {};\n}\n\nUndirectedNodeData.prototype.upgradeToMixed = function() {\n\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.directedSelfLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n};\n\n/**\n * EdgeData class.\n *\n * @constructor\n * @param {boolean} undirected   - Whether the edge is undirected.\n * @param {string}  string       - The edge's key.\n * @param {boolean} generatedKey - Was its key generated?\n * @param {string}  source       - Source of the edge.\n * @param {string}  target       - Target of the edge.\n * @param {object}  attributes   - Edge's attributes.\n */\nexport function EdgeData(undirected, key, generatedKey, source, target, attributes) {\n\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n  this.undirected = undirected;\n\n  // Extremities\n  this.source = source;\n  this.target = target;\n\n  // Was its key generated?\n  this.generatedKey = generatedKey;\n}\n","/**\n * Graphology Indexes Functions\n * =============================\n *\n * Bunch of functions used to compute or clear indexes.\n */\n\n/**\n * Function updating the 'structure' index with the given edge's data.\n * Note that in the case of the multi graph, related edges are stored in a\n * set that is the same for A -> B & B <- A.\n *\n * @param {Graph}    graph      - Target Graph instance.\n * @param {EdgeData} edgeData   - Added edge's data.\n * @param {NodeData} sourceData - Source node's data.\n * @param {NodeData} targetData - Target node's data.\n */\nexport function updateStructureIndex(\n  graph,\n  undirected,\n  edgeData,\n  source,\n  target,\n  sourceData,\n  targetData\n) {\n  const multi = graph.multi;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (undirected)\n    outKey = inKey = 'undirected';\n\n  let adj, container;\n\n  if (multi) {\n\n      // Handling source\n    adj = sourceData[outKey];\n    container = adj[target];\n\n    if (typeof container === 'undefined') {\n      container = new Set();\n      adj[target] = container;\n    }\n\n    container.add(edgeData);\n\n    // If selfLoop, we break here\n    if (source === target && undirected)\n      return;\n\n    // Handling target (we won't add the edge because it was already taken\n    // care of with source above)\n    adj = targetData[inKey];\n    if (typeof adj[source] === 'undefined')\n      adj[source] = container;\n  }\n  else {\n\n      // Handling source\n      sourceData[outKey][target] = edgeData;\n\n      // If selfLoop, we break here\n      if (source === target && undirected)\n        return;\n\n      // Handling target\n      targetData[inKey][source] = edgeData;\n  }\n}\n\n/**\n * Function clearing the 'structure' index data related to the given edge.\n *\n * @param {Graph}    graph    - Target Graph instance.\n * @param {EdgeData} edgeData - Dropped edge's data.\n */\nexport function clearEdgeFromStructureIndex(graph, undirected, edgeData) {\n  const multi = graph.multi;\n\n  const {source: sourceData, target: targetData} = edgeData;\n\n  const source = sourceData.key,\n        target = targetData.key;\n\n  // NOTE: since the edge set is the same for source & target, we can only\n  // affect source\n  const outKey = undirected ? 'undirected' : 'out',\n        sourceIndex = sourceData[outKey];\n\n  const inKey = undirected ? 'undirected' : 'in';\n\n  if (target in sourceIndex) {\n\n    if (multi) {\n      const set = sourceIndex[target];\n\n      if (set.size === 1) {\n        delete sourceIndex[target];\n        delete targetData[inKey][source];\n      }\n      else {\n        set.delete(edgeData);\n      }\n    }\n    else\n      delete sourceIndex[target];\n  }\n\n  if (multi)\n    return;\n\n  const targetIndex = targetData[inKey];\n\n  delete targetIndex[source];\n}\n\n/**\n * Function clearing the whole 'structure' index.\n *\n * @param {Graph} graph - Target Graph instance.\n */\nexport function clearStructureIndex(graph) {\n  graph._nodes.forEach(data => {\n\n    // Clearing now useless properties\n    if (typeof data.in !== 'undefined') {\n      data.in = {};\n      data.out = {};\n    }\n\n    if (typeof data.undirected !== 'undefined') {\n      data.undirected = {};\n    }\n  });\n}\n\n/**\n * Function used to upgrade a simple `structure` index to a multi on.\n *\n * @param {Graph}  graph - Target Graph instance.\n */\nexport function upgradeStructureIndexToMulti(graph) {\n  graph._nodes.forEach((data, node) => {\n\n    // Directed\n    if (data.out) {\n\n      for (const neighbor in data.out) {\n        const edges = new Set();\n        edges.add(data.out[neighbor]);\n        data.out[neighbor] = edges;\n        graph._nodes.get(neighbor).in[node] = edges;\n      }\n    }\n\n    // Undirected\n    if (data.undirected) {\n      for (const neighbor in data.undirected) {\n        if (neighbor > node)\n          continue;\n\n        const edges = new Set();\n        edges.add(data.undirected[neighbor]);\n        data.undirected[neighbor] = edges;\n        graph._nodes.get(neighbor).undirected[node] = edges;\n      }\n    }\n  });\n}\n","/**\n * Graphology Attributes methods\n * ==============================\n *\n * Attributes-related methods being exactly the same for nodes & edges,\n * we abstract them here for factorization reasons.\n */\nimport {\n  assign,\n  isPlainObject,\n  getMatchingEdge\n} from './utils';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\n/**\n * Attach an attribute getter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeGetter(Class, method, type) {\n\n  /**\n   * Get the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {mixed}          - The attribute's value.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function(element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(`Graph.${method}: cannot find this type of edges in your ${this.type} graph.`);\n\n    if (arguments.length > 2) {\n\n      if (this.multi)\n        throw new UsageGraphError(`Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);\n\n      const source = '' + element,\n            target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`);\n    }\n    else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" edge in the graph.`);\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`);\n\n    return data.attributes[name];\n  };\n}\n\n/**\n * Attach an attributes getter method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachAttributesGetter(Class, method, type) {\n\n  /**\n   * Retrieves all the target element's attributes.\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   *\n   * @return {object}          - The element's attributes.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function(element) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(`Graph.${method}: cannot find this type of edges in your ${this.type} graph.`);\n\n    if (arguments.length > 1) {\n\n      if (this.multi)\n        throw new UsageGraphError(`Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);\n\n      const source = '' + element,\n            target = '' + arguments[1];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`);\n    }\n    else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" edge in the graph.`);\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`);\n\n    return data.attributes;\n  };\n}\n\n/**\n * Attach an attribute checker method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachAttributeChecker(Class, method, type) {\n\n  /**\n   * Checks whether the desired attribute is set for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function(element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(`Graph.${method}: cannot find this type of edges in your ${this.type} graph.`);\n\n    if (arguments.length > 2) {\n\n      if (this.multi)\n        throw new UsageGraphError(`Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);\n\n      const source = '' + element,\n            target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`);\n    }\n    else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" edge in the graph.`);\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`);\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\n/**\n * Attach an attribute setter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeSetter(Class, method, type) {\n\n  /**\n   * Set the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function(element, name, value) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(`Graph.${method}: cannot find this type of edges in your ${this.type} graph.`);\n\n    if (arguments.length > 3) {\n\n      if (this.multi)\n        throw new UsageGraphError(`Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);\n\n      const source = '' + element,\n            target = '' + name;\n\n      name = arguments[2];\n      value = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`);\n    }\n    else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" edge in the graph.`);\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`);\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeUpdater(Class, method, type) {\n\n  /**\n   * Update the desired attribute for the given element (node or edge) using\n   * the provided function.\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function(element, name, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(`Graph.${method}: cannot find this type of edges in your ${this.type} graph.`);\n\n    if (arguments.length > 3) {\n\n      if (this.multi)\n        throw new UsageGraphError(`Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);\n\n      const source = '' + element,\n            target = '' + name;\n\n      name = arguments[2];\n      updater = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`);\n    }\n    else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" edge in the graph.`);\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(`Graph.${method}: updater should be a function.`);\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`);\n\n    data.attributes[name] = updater(data.attributes[name]);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute remover method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeRemover(Class, method, type) {\n\n  /**\n   * Remove the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function(element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(`Graph.${method}: cannot find this type of edges in your ${this.type} graph.`);\n\n    if (arguments.length > 2) {\n\n      if (this.multi)\n        throw new UsageGraphError(`Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);\n\n      const source = '' + element,\n            target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`);\n    }\n    else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" edge in the graph.`);\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`);\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute replacer method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributesReplacer(Class, method, type) {\n\n  /**\n   * Replace the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - New attributes.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - New attributes.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function(element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(`Graph.${method}: cannot find this type of edges in your ${this.type} graph.`);\n\n    if (arguments.length > 2) {\n\n      if (this.multi)\n        throw new UsageGraphError(`Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);\n\n      const source = '' + element,\n            target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`);\n    }\n    else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" edge in the graph.`);\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(`Graph.${method}: provided attributes are not a plain object.`);\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`);\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute merger method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributesMerger(Class, method, type) {\n\n  /**\n   * Replace the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - Attributes to merge.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - Attributes to merge.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function(element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(`Graph.${method}: cannot find this type of edges in your ${this.type} graph.`);\n\n    if (arguments.length > 2) {\n\n      if (this.multi)\n        throw new UsageGraphError(`Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);\n\n      const source = '' + element,\n            target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`);\n    }\n    else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" edge in the graph.`);\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(`Graph.${method}: provided attributes are not a plain object.`);\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(`Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`);\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachAttributesMerger\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport function attachAttributesMethods(Graph) {\n  ATTRIBUTES_METHODS.forEach(function({name, attacher}) {\n\n    // For edges\n    attacher(\n      Graph,\n      name('Edge'),\n      'mixed'\n    );\n\n    // For directed edges\n    attacher(\n      Graph,\n      name('DirectedEdge'),\n      'directed'\n    );\n\n    // For undirected edges\n    attacher(\n      Graph,\n      name('UndirectedEdge'),\n      'undirected'\n    );\n  });\n}\n","/**\n * Obliterator Chain Function\n * ===========================\n *\n * Variadic function combining the given iterators.\n */\nvar Iterator = require('./iterator.js');\n\n/**\n * Chain.\n *\n * @param  {...Iterator} iterators - Target iterators.\n * @return {Iterator}\n */\nmodule.exports = function chain() {\n  var iterators = arguments,\n      current,\n      i = -1;\n\n  return new Iterator(function iterate() {\n    if (!current) {\n      i++;\n\n      if (i >= iterators.length)\n        return {done: true};\n\n      current = iterators[i];\n    }\n\n    var step = current.next();\n\n    if (step.done) {\n      current = null;\n      return iterate();\n    }\n\n    return step;\n  });\n};\n","/**\n * Graphology Edge Iteration\n * ==========================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's edges.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\nimport take from 'obliterator/take';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError\n} from '../errors';\n\n/**\n * Definitions.\n */\nconst EDGES_ITERATION = [\n  {\n    name: 'edges',\n    type: 'mixed'\n  },\n  {\n    name: 'inEdges',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outEdges',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundEdges',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundEdges',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedEdges',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedEdges',\n    type: 'undirected'\n  }\n];\n\n/**\n * Function collecting edges from the given object.\n *\n * @param  {array}  edges  - Edges array to populate.\n * @param  {object} object - Target object.\n * @return {array}         - The found edges.\n */\nfunction collectSimple(edges, object) {\n  for (const k in object)\n    edges.push(object[k].key);\n}\n\nfunction collectMulti(edges, object) {\n  for (const k in object)\n    object[k].forEach(edgeData => edges.push(edgeData.key));\n}\n\n/**\n * Function iterating over edges from the given object using a callback.\n *\n * @param {object}   object   - Target object.\n * @param {function} callback - Function to call.\n */\nfunction forEachSimple(object, callback, avoid) {\n  for (const k in object) {\n    if (k === avoid)\n      continue;\n\n    const edgeData = object[k];\n\n    callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected,\n      edgeData.generatedKey\n    );\n  }\n}\n\nfunction forEachMulti(object, callback, avoid) {\n  for (const k in object) {\n    if (k === avoid)\n      continue;\n\n    object[k].forEach(edgeData => callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected,\n      edgeData.generatedKey\n    ));\n  }\n}\n\n/**\n * Function iterating over edges from the given object using a callback until\n * the return value of the callback is truthy.\n *\n * @param {object}   object   - Target object.\n * @param {function} callback - Function to call.\n */\nfunction forEachSimpleUntil(object, callback, avoid) {\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid)\n      continue;\n\n    const edgeData = object[k];\n\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected,\n      edgeData.generatedKey\n    );\n\n    if (shouldBreak)\n      return true;\n  }\n\n  return false;\n}\n\nfunction forEachMultiUntil(object, callback, avoid) {\n  let iterator, step, edgeData, source, target;\n\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid)\n      continue;\n\n    iterator = object[k].values();\n\n    while ((step = iterator.next(), step.done !== true)) {\n      edgeData = step.value;\n      source = edgeData.source;\n      target = edgeData.target;\n\n      shouldBreak = callback(\n        edgeData.key,\n        edgeData.attributes,\n        source.key,\n        target.key,\n        source.attributes,\n        target.attributes,\n        edgeData.undirected,\n        edgeData.generatedKey\n      );\n\n      if (shouldBreak)\n        return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Function returning an iterator over edges from the given object.\n *\n * @param  {object}   object - Target object.\n * @return {Iterator}\n */\nfunction createIterator(object, avoid) {\n  const keys = Object.keys(object),\n        l = keys.length;\n\n  let inner = null,\n      i = 0;\n\n  return new Iterator(function next() {\n    let edgeData;\n\n    if (inner) {\n      const step = inner.next();\n\n      if (step.done) {\n        inner = null;\n        i++;\n        return next();\n      }\n\n      edgeData = step.value;\n    }\n    else {\n      if (i >= l)\n        return {done: true};\n\n      const k = keys[i];\n\n      if (k === avoid) {\n        i++;\n        return next();\n      }\n\n      edgeData = object[k];\n\n      if (edgeData instanceof Set) {\n        inner = edgeData.values();\n        return next();\n      }\n\n      i++;\n    }\n\n    return {\n      done: false,\n      value: [\n        edgeData.key,\n        edgeData.attributes,\n        edgeData.source.key,\n        edgeData.target.key,\n        edgeData.source.attributes,\n        edgeData.target.attributes\n      ]\n    };\n  });\n}\n\n/**\n * Function collecting edges from the given object at given key.\n *\n * @param  {array}  edges  - Edges array to populate.\n * @param  {object} object - Target object.\n * @param  {mixed}  k      - Neighbor key.\n * @return {array}         - The found edges.\n */\nfunction collectForKeySimple(edges, object, k) {\n  const edgeData = object[k];\n\n  if (!edgeData)\n    return;\n\n  edges.push(edgeData.key);\n}\n\nfunction collectForKeyMulti(edges, object, k) {\n  const edgesData = object[k];\n\n  if (!edgesData)\n    return;\n\n  edgesData.forEach(edgeData => edges.push(edgeData.key));\n}\n\n/**\n * Function iterating over the egdes from the object at given key using\n * a callback.\n *\n * @param {object}   object   - Target object.\n * @param {mixed}    k        - Neighbor key.\n * @param {function} callback - Callback to use.\n */\nfunction forEachForKeySimple(object, k, callback) {\n  const edgeData = object[k];\n\n  if (!edgeData)\n    return;\n\n  const sourceData = edgeData.source;\n  const targetData = edgeData.target;\n\n  callback(\n    edgeData.key,\n    edgeData.attributes,\n    sourceData.key,\n    targetData.key,\n    sourceData.attributes,\n    targetData.attributes,\n    edgeData.undirected,\n    edgeData.generatedKey\n  );\n}\n\nfunction forEachForKeyMulti(object, k, callback) {\n  const edgesData = object[k];\n\n  if (!edgesData)\n    return;\n\n  edgesData.forEach(edgeData => callback(\n    edgeData.key,\n    edgeData.attributes,\n    edgeData.source.key,\n    edgeData.target.key,\n    edgeData.source.attributes,\n    edgeData.target.attributes,\n    edgeData.undirected,\n    edgeData.generatedKey\n  ));\n}\n\n/**\n * Function iterating over the egdes from the object at given key using\n * a callback until it returns a truthy value to stop iteration.\n *\n * @param {object}   object   - Target object.\n * @param {mixed}    k        - Neighbor key.\n * @param {function} callback - Callback to use.\n */\nfunction forEachForKeySimpleUntil(object, k, callback) {\n  const edgeData = object[k];\n\n  if (!edgeData)\n    return;\n\n  const sourceData = edgeData.source;\n  const targetData = edgeData.target;\n\n  return callback(\n    edgeData.key,\n    edgeData.attributes,\n    sourceData.key,\n    targetData.key,\n    sourceData.attributes,\n    targetData.attributes,\n    edgeData.undirected,\n    edgeData.generatedKey\n  );\n}\n\nfunction forEachForKeyMultiUntil(object, k, callback) {\n  const edgesData = object[k];\n\n  if (!edgesData)\n    return;\n\n  let shouldBreak = false;\n\n  const iterator = edgesData.values();\n  let step, edgeData;\n\n  while ((step = iterator.next(), step.done !== true)) {\n    edgeData = step.value;\n\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected,\n      edgeData.generatedKey\n    );\n\n    if (shouldBreak)\n      return true;\n  }\n\n  return false;\n}\n\n/**\n * Function returning an iterator over the egdes from the object at given key.\n *\n * @param  {object}   object   - Target object.\n * @param  {mixed}    k        - Neighbor key.\n * @return {Iterator}\n */\nfunction createIteratorForKey(object, k) {\n  const v = object[k];\n\n  if (v instanceof Set) {\n    const iterator = v.values();\n\n    return new Iterator(function() {\n      const step = iterator.next();\n\n      if (step.done)\n        return step;\n\n      const edgeData = step.value;\n\n      return {\n        done: false,\n        value: [\n          edgeData.key,\n          edgeData.attributes,\n          edgeData.source.key,\n          edgeData.target.key,\n          edgeData.source.attributes,\n          edgeData.target.attributes\n        ]\n      };\n    });\n  }\n\n  return Iterator.of([\n    v.key,\n    v.attributes,\n    v.source.key,\n    v.target.key,\n    v.source.attributes,\n    v.target.attributes\n  ]);\n}\n\n/**\n * Function creating an array of edges for the given type.\n *\n * @param  {Graph}   graph - Target Graph instance.\n * @param  {string}  type  - Type of edges to retrieve.\n * @return {array}         - Array of edges.\n */\nfunction createEdgeArray(graph, type) {\n  if (graph.size === 0)\n    return [];\n\n  if (type === 'mixed' || type === graph.type) {\n    if (typeof Array.from === 'function')\n      return Array.from(graph._edges.keys());\n\n    return take(graph._edges.keys(), graph._edges.size);\n  }\n\n  const size = type === 'undirected' ?\n    graph.undirectedSize :\n    graph.directedSize;\n\n  const list = new Array(size),\n        mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  let i = 0;\n  let step, data;\n\n  while ((step = iterator.next(), step.done !== true)) {\n    data = step.value;\n\n    if (data.undirected === mask)\n      list[i++] = data.key;\n  }\n\n  return list;\n}\n\n/**\n * Function iterating over a graph's edges using a callback.\n *\n * @param  {Graph}    graph    - Target Graph instance.\n * @param  {string}   type     - Type of edges to retrieve.\n * @param  {function} callback - Function to call.\n */\nfunction forEachEdge(graph, type, callback) {\n  if (graph.size === 0)\n    return;\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  let step, data;\n  const iterator = graph._edges.values();\n\n  while ((step = iterator.next(), step.done !== true)) {\n    data = step.value;\n\n    if (shouldFilter && data.undirected !== mask)\n      continue;\n\n    const {key, attributes, source, target} = data;\n\n    callback(\n      key,\n      attributes,\n      source.key,\n      target.key,\n      source.attributes,\n      target.attributes,\n      data.undirected,\n      data.generatedKey\n    );\n  }\n}\n\n/**\n * Function iterating over a graph's edges using a callback until it returns\n * a truthy value to stop iteration.\n *\n * @param  {Graph}    graph    - Target Graph instance.\n * @param  {string}   type     - Type of edges to retrieve.\n * @param  {function} callback - Function to call.\n */\nfunction forEachEdgeUntil(graph, type, callback) {\n  if (graph.size === 0)\n    return;\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  let step, data;\n  let shouldBreak = false;\n  const iterator = graph._edges.values();\n\n  while ((step = iterator.next(), step.done !== true)) {\n    data = step.value;\n\n    if (shouldFilter && data.undirected !== mask)\n      continue;\n\n    const {key, attributes, source, target} = data;\n\n    shouldBreak = callback(\n      key,\n      attributes,\n      source.key,\n      target.key,\n      source.attributes,\n      target.attributes,\n      data.undirected,\n      data.generatedKey\n    );\n\n    if (shouldBreak)\n      break;\n  }\n}\n\n/**\n * Function creating an iterator of edges for the given type.\n *\n * @param  {Graph}    graph - Target Graph instance.\n * @param  {string}   type  - Type of edges to retrieve.\n * @return {Iterator}\n */\nfunction createEdgeIterator(graph, type) {\n  if (graph.size === 0)\n    return Iterator.empty();\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  return new Iterator(function next() {\n    let step, data;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      step = iterator.next();\n\n      if (step.done)\n        return step;\n\n      data = step.value;\n\n      if (shouldFilter && data.undirected !== mask)\n        continue;\n\n      break;\n    }\n\n    const value = [\n      data.key,\n      data.attributes,\n      data.source.key,\n      data.target.key,\n      data.source.attributes,\n      data.target.attributes\n    ];\n\n    return {value, done: false};\n  });\n}\n\n/**\n * Function creating an array of edges for the given type & the given node.\n *\n * @param  {boolean} multi     - Whether the graph is multi or not.\n * @param  {string}  type      - Type of edges to retrieve.\n * @param  {string}  direction - In or out?\n * @param  {any}     nodeData  - Target node's data.\n * @return {array}             - Array of edges.\n */\nfunction createEdgeArrayForNode(multi, type, direction, nodeData) {\n  const edges = [];\n\n  const fn = multi ? collectMulti : collectSimple;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out')\n      fn(edges, nodeData.in);\n    if (direction !== 'in')\n      fn(edges, nodeData.out);\n\n    // Handling self loop edge case\n    if (!direction && nodeData.directedSelfLoops > 0)\n      edges.splice(edges.lastIndexOf(nodeData.key), 1);\n  }\n\n  if (type !== 'directed') {\n    fn(edges, nodeData.undirected);\n  }\n\n  return edges;\n}\n\n/**\n * Function iterating over a node's edges using a callback.\n *\n * @param  {boolean}  multi     - Whether the graph is multi or not.\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Function to call.\n */\nfunction forEachEdgeForNode(multi, type, direction, nodeData, callback) {\n  const fn = multi ? forEachMulti : forEachSimple;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out')\n      fn(nodeData.in, callback);\n    if (direction !== 'in')\n      fn(nodeData.out, callback, !direction ? nodeData.key : null);\n  }\n\n  if (type !== 'directed') {\n    fn(nodeData.undirected, callback);\n  }\n}\n\n/**\n * Function iterating over a node's edges using a callback until it returns\n * a truthy value to stop iteration.\n *\n * @param  {boolean}  multi     - Whether the graph is multi or not.\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Function to call.\n */\nfunction forEachEdgeForNodeUntil(multi, type, direction, nodeData, callback) {\n  const fn = multi ? forEachMultiUntil : forEachSimpleUntil;\n\n  let shouldBreak = false;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      shouldBreak = fn(nodeData.in, callback);\n\n      if (shouldBreak)\n        return;\n    }\n    if (direction !== 'in') {\n      shouldBreak = fn(nodeData.out, callback, !direction ? nodeData.key : null);\n\n      if (shouldBreak)\n        return;\n    }\n  }\n\n  if (type !== 'directed') {\n    shouldBreak = fn(nodeData.undirected, callback);\n\n    if (shouldBreak)\n      return;\n  }\n}\n\n/**\n * Function iterating over a node's edges using a callback.\n *\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createEdgeIteratorForNode(type, direction, nodeData) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out' && typeof nodeData.in !== 'undefined')\n      iterator = chain(iterator, createIterator(nodeData.in));\n    if (direction !== 'in' && typeof nodeData.out !== 'undefined')\n      iterator = chain(iterator, createIterator(nodeData.out, !direction ? nodeData.key : null));\n  }\n\n  if (type !== 'directed' && typeof nodeData.undirected !== 'undefined') {\n    iterator = chain(iterator, createIterator(nodeData.undirected));\n  }\n\n  return iterator;\n}\n\n/**\n * Function creating an array of edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {any}      target     - Target node.\n * @return {array}               - Array of edges.\n */\nfunction createEdgeArrayForPath(type, multi, direction, sourceData, target) {\n  const fn = multi ? collectForKeyMulti : collectForKeySimple;\n\n  const edges = [];\n\n  if (type !== 'undirected') {\n\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out')\n      fn(edges, sourceData.in, target);\n\n    if (typeof sourceData.out !== 'undefined' && direction !== 'in')\n      fn(edges, sourceData.out, target);\n\n    // Handling self loop edge case\n    if (!direction && sourceData.directedSelfLoops > 0)\n      edges.splice(edges.lastIndexOf(sourceData.key), 1);\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined')\n      fn(edges, sourceData.undirected, target);\n  }\n\n  return edges;\n}\n\n/**\n * Function iterating over edges for the given path using a callback.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction forEachEdgeForPath(type, multi, direction, sourceData, target, callback) {\n  const fn = multi ? forEachForKeyMulti : forEachForKeySimple;\n\n  if (type !== 'undirected') {\n\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out')\n      fn(sourceData.in, target, callback);\n\n    if (sourceData.key !== target)\n      if (typeof sourceData.out !== 'undefined' && direction !== 'in')\n        fn(sourceData.out, target, callback);\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined')\n      fn(sourceData.undirected, target, callback);\n  }\n}\n\n/**\n * Function iterating over edges for the given path using a callback until\n * it returns a truthy value to stop iteration.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction forEachEdgeForPathUntil(type, multi, direction, sourceData, target, callback) {\n  const fn = multi ? forEachForKeyMultiUntil : forEachForKeySimpleUntil;\n\n  let shouldBreak = false;\n\n  if (type !== 'undirected') {\n\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out') {\n      shouldBreak = fn(sourceData.in, target, callback);\n\n      if (shouldBreak)\n        return;\n    }\n\n    if (sourceData.key !== target)\n      if (typeof sourceData.out !== 'undefined' && direction !== 'in') {\n        shouldBreak = fn(sourceData.out, target, callback, !direction ? sourceData.key : null);\n\n        if (shouldBreak)\n          return;\n      }\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined') {\n      shouldBreak = fn(sourceData.undirected, target, callback);\n\n      if (shouldBreak)\n        return;\n    }\n  }\n}\n\n/**\n * Function returning an iterator over edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction createEdgeIteratorForPath(type, direction, sourceData, target) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n\n    if (\n      typeof sourceData.in !== 'undefined' &&\n      direction !== 'out' &&\n      target in sourceData.in\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.in, target));\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      target in sourceData.out\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.out, target));\n  }\n\n  if (type !== 'directed') {\n    if (\n      typeof sourceData.undirected !== 'undefined' &&\n      target in sourceData.undirected\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.undirected, target));\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching an edge array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeArrayCreator(Class, description) {\n  const {\n    name,\n    type,\n    direction\n  } = description;\n\n  /**\n   * Function returning an array of certain edges.\n   *\n   * Arity 0: Return all the relevant edges.\n   *\n   * Arity 1: Return all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Return the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function(source, target) {\n\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    if (!arguments.length)\n      return createEdgeArray(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(`Graph.${name}: could not find the \"${source}\" node in the graph.`);\n\n      // Iterating over a node's edges\n      return createEdgeArrayForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData\n      );\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(`Graph.${name}:  could not find the \"${source}\" source node in the graph.`);\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(`Graph.${name}:  could not find the \"${target}\" target node in the graph.`);\n\n      // Iterating over the edges between source & target\n      return createEdgeArrayForPath(type, this.multi, direction, sourceData, target);\n    }\n\n    throw new InvalidArgumentsGraphError(`Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`);\n  };\n}\n\n/**\n * Function attaching a edge callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachEdge(Class, description) {\n  const {\n    name,\n    type,\n    direction\n  } = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function(source, target, callback) {\n\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(`Graph.${forEachName}: could not find the \"${source}\" node in the graph.`);\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(`Graph.${forEachName}:  could not find the \"${source}\" source node in the graph.`);\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(`Graph.${forEachName}:  could not find the \"${target}\" target node in the graph.`);\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(type, this.multi, direction, sourceData, target, callback);\n    }\n\n    throw new InvalidArgumentsGraphError(`Graph.${forEachName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`);\n  };\n}\n\n/**\n * Function attaching a breakable edge callback iterator method to the Graph\n * prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachEdgeUntil(Class, description) {\n  const {\n    name,\n    type,\n    direction\n  } = description;\n\n  const forEachUntilName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1) + 'Until';\n\n  /**\n   * Function iterating over the graph's relevant edges by applying the given\n   * callback and breaking as soon as the callback return a truthy value.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachUntilName] = function(source, target, callback) {\n\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdgeUntil(this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(`Graph.${forEachUntilName}: could not find the \"${source}\" node in the graph.`);\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNodeUntil(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(`Graph.${forEachUntilName}:  could not find the \"${source}\" source node in the graph.`);\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(`Graph.${forEachUntilName}:  could not find the \"${target}\" target node in the graph.`);\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPathUntil(type, this.multi, direction, sourceData, target, callback);\n    }\n\n    throw new InvalidArgumentsGraphError(`Graph.${forEachUntilName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`);\n  };\n}\n\n/**\n * Function attaching an edge iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nexport function attachEdgeIteratorCreator(Class, description) {\n  const {\n    name: originalName,\n    type,\n    direction\n  } = description;\n\n  const name = originalName.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over the graph's edges.\n   *\n   * Arity 0: Iterate over all the relevant edges.\n   *\n   * Arity 1: Iterate over all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Iterate over the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function(source, target) {\n\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    if (!arguments.length)\n      return createEdgeIterator(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(`Graph.${name}: could not find the \"${source}\" node in the graph.`);\n\n      // Iterating over a node's edges\n      return createEdgeIteratorForNode(type, direction, sourceData);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(`Graph.${name}:  could not find the \"${source}\" source node in the graph.`);\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(`Graph.${name}:  could not find the \"${target}\" target node in the graph.`);\n\n      // Iterating over the edges between source & target\n      return createEdgeIteratorForPath(type, direction, sourceData, target);\n    }\n\n    throw new InvalidArgumentsGraphError(`Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`);\n  };\n}\n\n/**\n * Function attaching every edge iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport function attachEdgeIterationMethods(Graph) {\n  EDGES_ITERATION.forEach(description => {\n    attachEdgeArrayCreator(Graph, description);\n    attachForEachEdge(Graph, description);\n    attachForEachEdgeUntil(Graph, description);\n    attachEdgeIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Neighbor Iteration\n * ==============================\n *\n * Attaching some methods to the Graph class to be able to iterate over\n * neighbors.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\nimport take from 'obliterator/take';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError\n} from '../errors';\n\n/**\n * Definitions.\n */\nconst NEIGHBORS_ITERATION = [\n  {\n    name: 'neighbors',\n    type: 'mixed'\n  },\n  {\n    name: 'inNeighbors',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outNeighbors',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundNeighbors',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundNeighbors',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedNeighbors',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedNeighbors',\n    type: 'undirected'\n  }\n];\n\n/**\n * Function merging neighbors into the given set iterating over the given object.\n *\n * @param {BasicSet} neighbors - Neighbors set.\n * @param {object}   object    - Target object.\n */\nfunction merge(neighbors, object) {\n  if (typeof object === 'undefined')\n    return;\n\n  for (const neighbor in object)\n    neighbors.add(neighbor);\n}\n\n/**\n * Function creating an array of relevant neighbors for the given node.\n *\n * @param  {string}       type      - Type of neighbors.\n * @param  {string}       direction - Direction.\n * @param  {any}          nodeData  - Target node's data.\n * @return {Array}                  - The list of neighbors.\n */\nfunction createNeighborArrayForNode(type, direction, nodeData) {\n\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return Object.keys(nodeData.undirected);\n\n    if (typeof direction === 'string')\n      return Object.keys(nodeData[direction]);\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const neighbors = new Set();\n\n  if (type !== 'undirected') {\n\n    if (direction !== 'out') {\n      merge(neighbors, nodeData.in);\n    }\n    if (direction !== 'in') {\n      merge(neighbors, nodeData.out);\n    }\n  }\n\n  if (type !== 'directed') {\n    merge(neighbors, nodeData.undirected);\n  }\n\n  return take(neighbors.values(), neighbors.size);\n}\n\n/**\n * Function iterating over the given node's relevant neighbors using a\n * callback.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Callback to use.\n */\nfunction forEachInObject(nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set)\n      edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n          targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    callback(\n      neighborData.key,\n      neighborData.attributes\n    );\n  }\n}\n\nfunction forEachInObjectOnce(visited, nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set)\n      edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n          targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited.has(neighborData.key))\n      continue;\n\n    visited.add(neighborData.key);\n\n    callback(\n      neighborData.key,\n      neighborData.attributes\n    );\n  }\n}\n\n/**\n * Function iterating over the given node's relevant neighbors using a\n * callback until it returns a truthy value to stop iteration.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Callback to use.\n */\nfunction forEachInObjectUntil(nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set)\n      edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n          targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    const shouldBreak = callback(\n      neighborData.key,\n      neighborData.attributes\n    );\n\n    if (shouldBreak)\n      return true;\n  }\n\n  return false;\n}\n\nfunction forEachInObjectOnceUntil(visited, nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set)\n      edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n          targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited.has(neighborData.key))\n      continue;\n\n    visited.add(neighborData.key);\n\n    const shouldBreak = callback(\n      neighborData.key,\n      neighborData.attributes\n    );\n\n    if (shouldBreak)\n      return true;\n  }\n\n  return false;\n}\n\nfunction forEachNeighborForNode(type, direction, nodeData, callback) {\n\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return forEachInObject(nodeData, nodeData.undirected, callback);\n\n    if (typeof direction === 'string')\n      return forEachInObject(nodeData, nodeData[direction], callback);\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const visited = new Set();\n\n  if (type !== 'undirected') {\n\n    if (direction !== 'out') {\n      forEachInObjectOnce(visited, nodeData, nodeData.in, callback);\n    }\n    if (direction !== 'in') {\n      forEachInObjectOnce(visited, nodeData, nodeData.out, callback);\n    }\n  }\n\n  if (type !== 'directed') {\n    forEachInObjectOnce(visited, nodeData, nodeData.undirected, callback);\n  }\n}\n\nfunction forEachNeighborForNodeUntil(type, direction, nodeData, callback) {\n\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return forEachInObjectUntil(nodeData, nodeData.undirected, callback);\n\n    if (typeof direction === 'string')\n      return forEachInObjectUntil(nodeData, nodeData[direction], callback);\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const visited = new Set();\n\n  let shouldBreak = false;\n\n  if (type !== 'undirected') {\n\n    if (direction !== 'out') {\n      shouldBreak = forEachInObjectOnceUntil(visited, nodeData, nodeData.in, callback);\n\n      if (shouldBreak)\n        return;\n    }\n    if (direction !== 'in') {\n      shouldBreak = forEachInObjectOnceUntil(visited, nodeData, nodeData.out, callback);\n\n      if (shouldBreak)\n        return;\n    }\n  }\n\n  if (type !== 'directed') {\n    shouldBreak = forEachInObjectOnceUntil(visited, nodeData, nodeData.undirected, callback);\n\n    if (shouldBreak)\n      return;\n  }\n}\n\n/**\n * Function returning an iterator over the given node's relevant neighbors.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createObjectIterator(nodeData, object) {\n  const keys = Object.keys(object),\n        l = keys.length;\n\n  let i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {done: true};\n\n    let edgeData = object[keys[i++]];\n\n    if (edgeData instanceof Set)\n      edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n          targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    return {\n      done: false,\n      value: [neighborData.key, neighborData.attributes]\n    };\n  });\n}\n\nfunction createDedupedObjectIterator(visited, nodeData, object) {\n  const keys = Object.keys(object),\n        l = keys.length;\n\n  let i = 0;\n\n  return new Iterator(function next() {\n    if (i >= l)\n      return {done: true};\n\n    let edgeData = object[keys[i++]];\n\n    if (edgeData instanceof Set)\n      edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n          targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited.has(neighborData.key))\n      return next();\n\n    visited.add(neighborData.key);\n\n    return {\n      done: false,\n      value: [neighborData.key, neighborData.attributes]\n    };\n  });\n}\n\nfunction createNeighborIterator(type, direction, nodeData) {\n\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return createObjectIterator(nodeData, nodeData.undirected);\n\n    if (typeof direction === 'string')\n      return createObjectIterator(nodeData, nodeData[direction]);\n  }\n\n  let iterator = Iterator.empty();\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const visited = new Set();\n\n  if (type !== 'undirected') {\n\n    if (direction !== 'out') {\n      iterator = chain(iterator, createDedupedObjectIterator(visited, nodeData, nodeData.in));\n    }\n    if (direction !== 'in') {\n      iterator = chain(iterator, createDedupedObjectIterator(visited, nodeData, nodeData.out));\n    }\n  }\n\n  if (type !== 'directed') {\n    iterator = chain(iterator, createDedupedObjectIterator(visited, nodeData, nodeData.undirected));\n  }\n\n  return iterator;\n}\n\n/**\n * Function returning whether the given node has target neighbor.\n *\n * @param  {Graph}        graph     - Target graph.\n * @param  {string}       type      - Type of neighbor.\n * @param  {string}       direction - Direction.\n * @param  {any}          node      - Target node.\n * @param  {any}          neighbor  - Target neighbor.\n * @return {boolean}\n */\nfunction nodeHasNeighbor(graph, type, direction, node, neighbor) {\n\n  const nodeData = graph._nodes.get(node);\n\n  if (type !== 'undirected') {\n\n    if (direction !== 'out' && typeof nodeData.in !== 'undefined') {\n      for (const k in nodeData.in)\n        if (k === neighbor)\n          return true;\n    }\n    if (direction !== 'in' && typeof nodeData.out !== 'undefined') {\n      for (const k in nodeData.out)\n        if (k === neighbor)\n          return true;\n    }\n  }\n\n  if (type !== 'directed' && typeof nodeData.undirected !== 'undefined') {\n    for (const k in nodeData.undirected)\n        if (k === neighbor)\n          return true;\n  }\n\n  return false;\n}\n\n/**\n * Function attaching a neighbors array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborArrayCreator(Class, description) {\n  const {\n    name,\n    type,\n    direction\n  } = description;\n\n  /**\n   * Function returning an array or the count of certain neighbors.\n   *\n   * Arity 1: Return all of a node's relevant neighbors.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Return whether the two nodes are indeed neighbors.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The neighbors or the number of neighbors.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function(node) {\n\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    if (arguments.length === 2) {\n      const node1 = '' + arguments[0],\n            node2 = '' + arguments[1];\n\n      if (!this._nodes.has(node1))\n        throw new NotFoundGraphError(`Graph.${name}: could not find the \"${node1}\" node in the graph.`);\n\n      if (!this._nodes.has(node2))\n        throw new NotFoundGraphError(`Graph.${name}: could not find the \"${node2}\" node in the graph.`);\n\n      // Here, we want to assess whether the two given nodes are neighbors\n      return nodeHasNeighbor(\n        this,\n        type,\n        direction,\n        node1,\n        node2\n      );\n    }\n    else if (arguments.length === 1) {\n      node = '' + node;\n\n      const nodeData = this._nodes.get(node);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(`Graph.${name}: could not find the \"${node}\" node in the graph.`);\n\n      // Here, we want to iterate over a node's relevant neighbors\n      const neighbors = createNeighborArrayForNode(\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData\n      );\n\n      return neighbors;\n    }\n\n    throw new InvalidArgumentsGraphError(`Graph.${name}: invalid number of arguments (expecting 1 or 2 and got ${arguments.length}).`);\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachNeighbor(Class, description) {\n  const {\n    name,\n    type,\n    direction\n  } = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function(node, callback) {\n\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(`Graph.${forEachName}: could not find the \"${node}\" node in the graph.`);\n\n    // Here, we want to iterate over a node's relevant neighbors\n    forEachNeighborForNode(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n}\n\n/**\n * Function attaching a breakable neighbors callback iterator method to the\n * Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachNeighborUntil(Class, description) {\n  const {\n    name,\n    type,\n    direction\n  } = description;\n\n  const forEachUntilName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1) + 'Until';\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachUntilName] = function(node, callback) {\n\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(`Graph.${forEachUntilName}: could not find the \"${node}\" node in the graph.`);\n\n    // Here, we want to iterate over a node's relevant neighbors\n    forEachNeighborForNodeUntil(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborIteratorCreator(Class, description) {\n  const {\n    name,\n    type,\n    direction\n  } = description;\n\n  const iteratorName = name.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over all the relevant neighbors.\n   *\n   * @param  {any}      node     - Target node.\n   * @return {Iterator}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[iteratorName] = function(node) {\n\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(`Graph.${iteratorName}: could not find the \"${node}\" node in the graph.`);\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborIterator(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching every neighbor iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport function attachNeighborIterationMethods(Graph) {\n  NEIGHBORS_ITERATION.forEach(description => {\n    attachNeighborArrayCreator(Graph, description);\n    attachForEachNeighbor(Graph, description);\n    attachForEachNeighborUntil(Graph, description);\n    attachNeighborIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Adjacency Iteration\n * ================================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's adjacency.\n */\nimport Iterator from 'obliterator/iterator';\n\n/**\n * Function iterating over a simple graph's adjacency using a callback.\n *\n * @param {boolean}  breakable - Can we break?\n * @param {Graph}    graph     - Target Graph instance.\n * @param {callback} function  - Iteration callback.\n */\nexport function forEachAdjacencySimple(breakable, graph, callback) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let step, sourceData, neighbor, adj, edgeData, targetData, shouldBreak;\n\n  while ((step = iterator.next(), step.done !== true)) {\n    sourceData = step.value;\n\n    if (type !== 'undirected') {\n      adj = sourceData.out;\n\n      for (neighbor in adj) {\n        edgeData = adj[neighbor];\n        targetData = edgeData.target;\n\n        shouldBreak = callback(\n          sourceData.key,\n          targetData.key,\n          sourceData.attributes,\n          targetData.attributes,\n          edgeData.key,\n          edgeData.attributes,\n          edgeData.undirected,\n          edgeData.generatedKey\n        );\n\n        if (breakable && shouldBreak)\n          return;\n      }\n    }\n\n    if (type !== 'directed') {\n      adj = sourceData.undirected;\n\n      for (neighbor in adj) {\n        edgeData = adj[neighbor];\n        targetData = edgeData.target;\n\n        if (targetData.key !== neighbor)\n          targetData = edgeData.source;\n\n        shouldBreak = callback(\n          sourceData.key,\n          targetData.key,\n          sourceData.attributes,\n          targetData.attributes,\n          edgeData.key,\n          edgeData.attributes,\n          edgeData.undirected,\n          edgeData.generatedKey\n        );\n\n        if (breakable && shouldBreak)\n          return;\n      }\n    }\n  }\n}\n\n/**\n * Function iterating over a multi graph's adjacency using a callback.\n *\n * @param {boolean}  breakable - Can we break?\n * @param {Graph}    graph    - Target Graph instance.\n * @param {callback} function - Iteration callback.\n */\nexport function forEachAdjacencyMulti(breakable, graph, callback) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let step, sourceData, neighbor, container, containerStep, adj, edgeData, targetData, shouldBreak;\n\n  while ((step = iterator.next(), step.done !== true)) {\n    sourceData = step.value;\n\n    if (type !== 'undirected') {\n      adj = sourceData.out;\n\n      for (neighbor in adj) {\n        container = adj[neighbor].values();\n\n        while ((containerStep = container.next(), containerStep.done !== true)) {\n          edgeData = containerStep.value;\n          targetData = edgeData.target;\n\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected,\n            edgeData.generatedKey\n          );\n\n          if (breakable && shouldBreak)\n            return;\n        }\n      }\n    }\n\n    if (type !== 'directed') {\n      adj = sourceData.undirected;\n\n      for (neighbor in adj) {\n        container = adj[neighbor].values();\n\n        while ((containerStep = container.next(), containerStep.done !== true)) {\n          edgeData = containerStep.value;\n          targetData = edgeData.target;\n\n          if (targetData.key !== neighbor)\n            targetData = edgeData.source;\n\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected,\n            edgeData.generatedKey\n          );\n\n          if (breakable && shouldBreak)\n            return;\n        }\n      }\n    }\n  }\n}\n\nexport function createAdjacencyIteratorSimple(graph) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let state = 'outer',\n      sourceData,\n      neighbors,\n      adj,\n      offset;\n\n  return new Iterator(function next() {\n    let step;\n\n    if (state === 'outer') {\n      step = iterator.next();\n\n      if (step.done === true)\n        return step;\n\n      sourceData = step.value;\n\n      state = 'directed';\n      return next();\n    }\n\n    if (state === 'directed') {\n      if (type === 'undirected') {\n        state = 'undirected';\n        return next();\n      }\n\n      adj = sourceData.out;\n      neighbors = Object.keys(sourceData.out);\n      offset = 0;\n      state = 'inner-directed';\n\n      return next();\n    }\n\n    if (state === 'undirected') {\n      if (type === 'directed') {\n        state = 'outer';\n        return next();\n      }\n\n      adj = sourceData.undirected;\n      neighbors = Object.keys(sourceData.undirected);\n      offset = 0;\n      state = 'inner-undirected';\n    }\n\n    // Inner\n    if (offset >= neighbors.length) {\n      if (state === 'inner-undirected')\n        state = 'outer';\n      else\n        state = 'undirected';\n\n      return next();\n    }\n\n    const neighbor = neighbors[offset++];\n    const edgeData = adj[neighbor];\n    let targetData = edgeData.target;\n\n    if (state === 'inner-undirected' && targetData.key === sourceData.key)\n      targetData = edgeData.source;\n\n    return {\n      done: false,\n      value: [\n        sourceData.key,\n        targetData.key,\n        sourceData.attributes,\n        targetData.attributes,\n        edgeData.key,\n        edgeData.attributes\n      ]\n    };\n  });\n}\n\nexport function createAdjacencyIteratorMulti(graph) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let state = 'outer',\n      sourceData,\n      neighbors,\n      container = null,\n      adj,\n      offset;\n\n  return new Iterator(function next() {\n    let step;\n\n    if (state === 'outer') {\n      step = iterator.next();\n\n      if (step.done === true)\n        return step;\n\n      sourceData = step.value;\n\n      state = 'directed';\n      return next();\n    }\n\n    if (state === 'directed') {\n      if (type === 'undirected') {\n        state = 'undirected';\n        return next();\n      }\n\n      adj = sourceData.out;\n      neighbors = Object.keys(sourceData.out);\n      offset = 0;\n      state = 'inner-directed';\n\n      return next();\n    }\n\n    if (state === 'undirected') {\n      if (type === 'directed') {\n        state = 'outer';\n        return next();\n      }\n\n      adj = sourceData.undirected;\n      neighbors = Object.keys(sourceData.undirected);\n      offset = 0;\n      state = 'inner-undirected';\n    }\n\n    // Inner\n    if (!container && offset >= neighbors.length) {\n      if (state === 'inner-undirected')\n        state = 'outer';\n      else\n        state = 'undirected';\n\n      return next();\n    }\n\n    if (!container) {\n      const neighbor = neighbors[offset++];\n      container = adj[neighbor].values();\n      return next();\n    }\n\n    step = container.next();\n\n    if (step.done) {\n      container = null;\n      return next();\n    }\n\n    const edgeData = step.value;\n    let targetData = edgeData.target;\n\n    if (state === 'inner-undirected' && targetData.key === sourceData.key)\n      targetData = edgeData.source;\n\n    return {\n      done: false,\n      value: [\n        sourceData.key,\n        targetData.key,\n        sourceData.attributes,\n        targetData.attributes,\n        edgeData.key,\n        edgeData.attributes\n      ]\n    };\n  });\n}\n","/**\n * Graphology Serialization Utilities\n * ===================================\n *\n * Collection of functions used to validate import-export formats & to ouput\n * them from internal graph data.\n *\n * Serialized Node:\n * {key, ?attributes}\n *\n * Serialized Edge:\n * {key?, source, target, attributes?, undirected?}\n *\n * Serialized Graph:\n * {nodes[], edges?[]}\n */\nimport {assign, isPlainObject, isEmpty} from './utils';\n\n/**\n * Formats internal node data into a serialized node.\n *\n * @param  {any}    key  - The node's key.\n * @param  {object} data - Internal node's data.\n * @return {array}       - The serialized node.\n */\nexport function serializeNode(key, data) {\n  const serialized = {key};\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  return serialized;\n}\n\n/**\n * Formats internal edge data into a serialized edge.\n *\n * @param  {any}    key  - The edge's key.\n * @param  {object} data - Internal edge's data.\n * @return {array}       - The serialized edge.\n */\nexport function serializeEdge(key, data) {\n  const serialized = {\n    source: data.source.key,\n    target: data.target.key\n  };\n\n  // We export the key unless if it was provided by the user\n  if (!data.generatedKey)\n    serialized.key = key;\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  if (data.undirected)\n    serialized.undirected = true;\n\n  return serialized;\n}\n\n/**\n * Checks whether the given value is a serialized node.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedNode(value) {\n  if (!isPlainObject(value))\n    return 'not-object';\n\n  if (!('key' in value))\n    return 'no-key';\n\n  if ('attributes' in value &&\n      (!isPlainObject(value.attributes) || value.attributes === null))\n    return 'invalid-attributes';\n\n  return null;\n}\n\n/**\n * Checks whether the given value is a serialized edge.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedEdge(value) {\n  if (!isPlainObject(value))\n    return 'not-object';\n\n  if (!('source' in value))\n    return 'no-source';\n\n  if (!('target' in value))\n    return 'no-target';\n\n  if ('attributes' in value &&\n      (!isPlainObject(value.attributes) || value.attributes === null))\n    return 'invalid-attributes';\n\n  if ('undirected' in value &&\n      (typeof value.undirected !== 'boolean'))\n    return 'invalid-undirected';\n\n  return null;\n}\n","/* eslint no-nested-ternary: 0 */\n/**\n * Graphology Reference Implementation\n * ====================================\n *\n * Reference implementation of the graphology specs.\n */\nimport {EventEmitter} from 'events';\nimport Iterator from 'obliterator/iterator';\nimport take from 'obliterator/take';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\nimport {\n  MixedNodeData,\n  DirectedNodeData,\n  UndirectedNodeData,\n  EdgeData\n} from './data';\n\nimport {\n  updateStructureIndex,\n  clearEdgeFromStructureIndex,\n  clearStructureIndex,\n  upgradeStructureIndexToMulti\n} from './indices';\n\nimport {attachAttributesMethods} from './attributes';\nimport {attachEdgeIterationMethods} from './iteration/edges';\nimport {attachNeighborIterationMethods} from './iteration/neighbors';\nimport {\n  forEachAdjacencySimple,\n  forEachAdjacencyMulti,\n  createAdjacencyIteratorSimple,\n  createAdjacencyIteratorMulti\n} from './iteration/adjacency';\n\nimport {\n  serializeNode,\n  serializeEdge,\n  validateSerializedNode,\n  validateSerializedEdge\n} from './serialization';\n\nimport {\n  assign,\n  getMatchingEdge,\n  isGraph,\n  isPlainObject,\n  privateProperty,\n  readOnlyProperty,\n  incrementalId,\n  validateHints\n} from './utils';\n\n/**\n * Enums.\n */\nconst TYPES = new Set([\n  'directed',\n  'undirected',\n  'mixed'\n]);\n\nconst EMITTER_PROPS = new Set([\n  'domain',\n  '_events',\n  '_eventsCount',\n  '_maxListeners'\n]);\n\nconst EDGE_ADD_METHODS = [\n  {\n    name: verb => `${verb}Edge`,\n    generateKey: true\n  },\n  {\n    name: verb => `${verb}DirectedEdge`,\n    generateKey: true,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdge`,\n    generateKey: true,\n    type: 'undirected'\n  },\n  {\n    name: verb => `${verb}EdgeWithKey`,\n  },\n  {\n    name: verb => `${verb}DirectedEdgeWithKey`,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdgeWithKey`,\n    type: 'undirected'\n  }\n];\n\n/**\n * Default options.\n */\nconst DEFAULTS = {\n  allowSelfLoops: true,\n  edgeKeyGenerator: null,\n  multi: false,\n  type: 'mixed'\n};\n\n/**\n * Abstract functions used by the Graph class for various methods.\n */\n\n/**\n * Internal method used to add a node to the given graph\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {any}     node            - The node's key.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {NodeData}                - Created node data.\n */\nfunction addNode(graph, node, attributes) {\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(`Graph.addNode: invalid attributes. Expecting an object but got \"${attributes}\"`);\n\n  // String coercion\n  node = '' + node;\n  attributes = attributes || {};\n\n  if (graph._nodes.has(node))\n    throw new UsageGraphError(`Graph.addNode: the \"${node}\" node already exist in the graph.`);\n\n  const data = new graph.NodeDataClass(node, attributes);\n\n  // Adding the node to internal register\n  graph._nodes.set(node, data);\n\n  // Emitting\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Same as the above but without sanity checks because we call this in contexts\n * where necessary checks were already done.\n */\nfunction unsafeAddNode(graph, node, attributes) {\n  const data = new graph.NodeDataClass(node, attributes);\n\n  graph._nodes.set(node, data);\n\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction addEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes\n) {\n\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(`Graph.${name}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`);\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(`Graph.${name}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`);\n\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(`Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`);\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n  attributes = attributes || {};\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(`Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`);\n\n  const sourceData = graph._nodes.get(source),\n        targetData = graph._nodes.get(target);\n\n  if (!sourceData)\n    throw new NotFoundGraphError(`Graph.${name}: source node \"${source}\" not found.`);\n\n  if (!targetData)\n    throw new NotFoundGraphError(`Graph.${name}: target node \"${target}\" not found.`);\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey)\n    edge = graph._edgeKeyGenerator(eventData);\n\n  // Coercion of edge key\n  edge = '' + edge;\n\n  // Here, we have a key collision\n  if (graph._edges.has(edge))\n    throw new UsageGraphError(`Graph.${name}: the \"${edge}\" edge already exists in the graph.`);\n\n  // Here, we might have a source / target collision\n  if (\n    !graph.multi &&\n    (\n      undirected ?\n        typeof sourceData.undirected[target] !== 'undefined' :\n        typeof sourceData.out[target] !== 'undefined'\n    )\n  ) {\n    throw new UsageGraphError(`Graph.${name}: an edge linking \"${source}\" to \"${target}\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`);\n  }\n\n  // Storing some data\n  const edgeData = new EdgeData(\n    undirected,\n    edge,\n    mustGenerateKey,\n    sourceData,\n    targetData,\n    attributes\n  );\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  if (source === target) {\n    if (undirected) {\n      sourceData.undirectedSelfLoops++;\n      graph._undirectedSelfLoopCount++;\n    }\n    else {\n      sourceData.directedSelfLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  }\n  else {\n    if (undirected) {\n      sourceData.undirectedDegree++;\n      targetData.undirectedDegree++;\n    }\n    else {\n      sourceData.outDegree++;\n      targetData.inDegree++;\n    }\n  }\n\n  // Updating relevant index\n  updateStructureIndex(\n    graph,\n    undirected,\n    edgeData,\n    source,\n    target,\n    sourceData,\n    targetData\n  );\n\n  if (undirected)\n    graph._undirectedSize++;\n  else\n    graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return edge;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @param  {boolean} [asUpdater]       - Are we updating or merging?\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction mergeEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes,\n  asUpdater\n) {\n\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(`Graph.${name}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`);\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(`Graph.${name}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`);\n\n  if (attributes) {\n    if (asUpdater) {\n      if (typeof attributes !== 'function')\n        throw new InvalidArgumentsGraphError(`Graph.${name}: invalid updater function. Expecting a function but got \"${attributes}\"`);\n    }\n    else {\n      if (!isPlainObject(attributes))\n        throw new InvalidArgumentsGraphError(`Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`);\n    }\n  }\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n\n  let updater;\n\n  if (asUpdater) {\n    updater = attributes;\n    attributes = undefined;\n  }\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(`Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`);\n\n  let sourceData = graph._nodes.get(source),\n      targetData = graph._nodes.get(target),\n      edgeData;\n\n  // Do we need to handle duplicate?\n  let alreadyExistingEdgeData;\n\n  if (!mustGenerateKey) {\n    edgeData = graph._edges.get(edge);\n\n    if (edgeData) {\n\n      // Here, we need to ensure, if the user gave a key, that source & target\n      // are coherent\n      if (\n        (edgeData.source.key !== source || edgeData.target.key !== target) ||\n        (undirected && (edgeData.source.key !== target || edgeData.target.key !== source))\n      ) {\n        throw new UsageGraphError(`Graph.${name}: inconsistency detected when attempting to merge the \"${edge}\" edge with \"${source}\" source & \"${target}\" target vs. (\"${edgeData.source.key}\", \"${edgeData.target.key}\").`);\n      }\n\n      alreadyExistingEdgeData = edgeData;\n    }\n  }\n\n  // Here, we might have a source / target collision\n  if (\n    !alreadyExistingEdgeData &&\n    !graph.multi &&\n    sourceData\n  ) {\n    alreadyExistingEdgeData = undirected ?\n      sourceData.undirected[target] :\n      sourceData.out[target];\n  }\n\n  // Handling duplicates\n  if (alreadyExistingEdgeData) {\n\n    // We can skip the attribute merging part if the user did not provide them\n    if (asUpdater ? !updater : !attributes)\n      return alreadyExistingEdgeData.key;\n\n    // Updating the attributes\n    if (asUpdater) {\n      const oldAttributes = alreadyExistingEdgeData.attributes;\n      alreadyExistingEdgeData.attributes = updater(oldAttributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'replace',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes,\n      });\n    }\n\n    // Merging the attributes\n    else {\n      assign(alreadyExistingEdgeData.attributes, attributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'merge',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes,\n        data: attributes\n      });\n    }\n\n    return alreadyExistingEdgeData.key;\n  }\n\n  attributes = attributes || {};\n\n  if (asUpdater && updater)\n    attributes = updater(attributes);\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey)\n    edge = graph._edgeKeyGenerator(eventData);\n\n  // Coercion of edge key\n  edge = '' + edge;\n\n  // Here, we have a key collision\n  if (graph._edges.has(edge))\n    throw new UsageGraphError(`Graph.${name}: the \"${edge}\" edge already exists in the graph.`);\n\n  if (!sourceData) {\n    sourceData = unsafeAddNode(graph, source, {});\n\n    if (source === target)\n      targetData = sourceData;\n  }\n  if (!targetData) {\n    targetData = unsafeAddNode(graph, target, {});\n  }\n\n  // Storing some data\n  edgeData = new EdgeData(\n    undirected,\n    edge,\n    mustGenerateKey,\n    sourceData,\n    targetData,\n    attributes\n  );\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  if (source === target) {\n    if (undirected) {\n      sourceData.undirectedSelfLoops++;\n      graph._undirectedSelfLoopCount++;\n    }\n    else {\n      sourceData.directedSelfLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  }\n  else {\n    if (undirected) {\n      sourceData.undirectedDegree++;\n      targetData.undirectedDegree++;\n    }\n    else {\n      sourceData.outDegree++;\n      targetData.inDegree++;\n    }\n  }\n\n  // Updating relevant index\n  updateStructureIndex(\n    graph,\n    undirected,\n    edgeData,\n    source,\n    target,\n    sourceData,\n    targetData\n  );\n\n  if (undirected)\n    graph._undirectedSize++;\n  else\n    graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return edge;\n}\n\n/**\n * Graph class\n *\n * @constructor\n * @param  {object}  [options] - Options:\n * @param  {boolean}   [allowSelfLoops] - Allow self loops?\n * @param  {string}    [type]           - Type of the graph.\n * @param  {boolean}   [map]            - Allow references as keys?\n * @param  {boolean}   [multi]          - Allow parallel edges?\n *\n * @throws {Error} - Will throw if the arguments are not valid.\n */\nexport default class Graph extends EventEmitter {\n  constructor(options) {\n    super();\n\n    //-- Solving options\n    options = assign({}, DEFAULTS, options);\n\n    // Enforcing options validity\n    if (options.edgeKeyGenerator && typeof options.edgeKeyGenerator !== 'function')\n      throw new InvalidArgumentsGraphError(`Graph.constructor: invalid 'edgeKeyGenerator' option. Expecting a function but got \"${options.edgeKeyGenerator}\".`);\n\n    if (typeof options.multi !== 'boolean')\n      throw new InvalidArgumentsGraphError(`Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"${options.multi}\".`);\n\n    if (!TYPES.has(options.type))\n      throw new InvalidArgumentsGraphError(`Graph.constructor: invalid 'type' option. Should be one of \"mixed\", \"directed\" or \"undirected\" but got \"${options.type}\".`);\n\n    if (typeof options.allowSelfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(`Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"${options.allowSelfLoops}\".`);\n\n    //-- Private properties\n\n    // Utilities\n    const NodeDataClass = options.type === 'mixed' ?\n      MixedNodeData :\n      (options.type === 'directed') ?\n        DirectedNodeData :\n        UndirectedNodeData;\n\n    privateProperty(this, 'NodeDataClass', NodeDataClass);\n\n    // Indexes\n    privateProperty(this, '_attributes', {});\n    privateProperty(this, '_nodes', new Map());\n    privateProperty(this, '_edges', new Map());\n    privateProperty(this, '_directedSize', 0);\n    privateProperty(this, '_undirectedSize', 0);\n    privateProperty(this, '_directedSelfLoopCount', 0);\n    privateProperty(this, '_undirectedSelfLoopCount', 0);\n    privateProperty(this, '_edgeKeyGenerator', options.edgeKeyGenerator || incrementalId());\n\n    // Options\n    privateProperty(this, '_options', options);\n\n    // Emitter properties\n    EMITTER_PROPS.forEach(prop => privateProperty(this, prop, this[prop]));\n\n    //-- Properties readers\n    readOnlyProperty(this, 'order', () => this._nodes.size);\n    readOnlyProperty(this, 'size', () => this._edges.size);\n    readOnlyProperty(this, 'directedSize', () => this._directedSize);\n    readOnlyProperty(this, 'undirectedSize', () => this._undirectedSize);\n    readOnlyProperty(this, 'selfLoopCount', () => this._directedSelfLoopCount + this._undirectedSelfLoopCount);\n    readOnlyProperty(this, 'directedSelfLoopCount', () => this._directedSelfLoopCount);\n    readOnlyProperty(this, 'undirectedSelfLoopCount', () => this._undirectedSelfLoopCount);\n    readOnlyProperty(this, 'multi', this._options.multi);\n    readOnlyProperty(this, 'type', this._options.type);\n    readOnlyProperty(this, 'allowSelfLoops', this._options.allowSelfLoops);\n    readOnlyProperty(this, 'implementation', () => 'graphology');\n  }\n\n  /**---------------------------------------------------------------------------\n   * Read\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning whether the given node is found in the graph.\n   *\n   * @param  {any}     node - The node.\n   * @return {boolean}\n   */\n  hasNode(node) {\n    return this._nodes.has('' + node);\n  }\n\n  /**\n   * Method returning whether the given directed edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasDirectedEdge(source, target) {\n\n    // Early termination\n    if (this.type === 'undirected')\n      return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return (\n        !!edgeData &&\n        !edgeData.undirected\n      );\n    }\n    else if (arguments.length === 2) {\n\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData)\n        return false;\n\n      // Is there a directed edge pointing toward target?\n      const edges = nodeData.out[target];\n\n      if (!edges)\n        return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(`Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`);\n  }\n\n  /**\n   * Method returning whether the given undirected edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasUndirectedEdge(source, target) {\n\n    // Early termination\n    if (this.type === 'directed')\n      return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return (\n        !!edgeData &&\n        edgeData.undirected\n      );\n    }\n    else if (arguments.length === 2) {\n\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData)\n        return false;\n\n      // Is there a directed edge pointing toward target?\n      const edges = nodeData.undirected[target];\n\n      if (!edges)\n        return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(`Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`);\n  }\n\n  /**\n   * Method returning whether the given edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasEdge(source, target) {\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      return this._edges.has(edge);\n    }\n    else if (arguments.length === 2) {\n\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData)\n        return false;\n\n      // Is there a directed edge pointing toward target?\n      let edges = typeof nodeData.out !== 'undefined' && nodeData.out[target];\n\n      if (!edges)\n        edges = typeof nodeData.undirected !== 'undefined' && nodeData.undirected[target];\n\n      if (!edges)\n        return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(`Graph.hasEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`);\n  }\n\n  /**\n   * Method returning the edge matching source & target in a directed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  directedEdge(source, target) {\n\n    if (this.type === 'undirected')\n      return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError('Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.');\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(`Graph.directedEdge: could not find the \"${source}\" source node in the graph.`);\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(`Graph.directedEdge: could not find the \"${target}\" target node in the graph.`);\n\n    const edgeData = (sourceData.out && sourceData.out[target]) || undefined;\n\n    if (edgeData)\n      return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a undirected fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  undirectedEdge(source, target) {\n\n    if (this.type === 'directed')\n      return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError('Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.');\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(`Graph.undirectedEdge: could not find the \"${source}\" source node in the graph.`);\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(`Graph.undirectedEdge: could not find the \"${target}\" target node in the graph.`);\n\n    const edgeData = (sourceData.undirected && sourceData.undirected[target]) || undefined;\n\n    if (edgeData)\n      return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a mixed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  edge(source, target) {\n    if (this.multi)\n      throw new UsageGraphError('Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.');\n\n    source = '' + source;\n    target = '' + target;\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(`Graph.edge: could not find the \"${source}\" source node in the graph.`);\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(`Graph.edge: could not find the \"${target}\" target node in the graph.`);\n\n    const edgeData = (\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]) ||\n      undefined\n    );\n\n    if (edgeData)\n      return edgeData.key;\n  }\n\n  /**\n   * Method returning the given node's in degree.\n   *\n   * @param  {any}     node      - The node's key.\n   * @param  {boolean} allowSelfLoops - Count self-loops?\n   * @return {number}            - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the selfLoops arg is not boolean.\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegree(node, selfLoops = true) {\n    if (typeof selfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(`Graph.inDegree: Expecting a boolean but got \"${selfLoops}\" for the second parameter (allowing self-loops to be counted).`);\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(`Graph.inDegree: could not find the \"${node}\" node in the graph.`);\n\n    if (this.type === 'undirected')\n      return 0;\n\n    const loops = selfLoops ? nodeData.directedSelfLoops : 0;\n\n    return nodeData.inDegree + loops;\n  }\n\n  /**\n   * Method returning the given node's out degree.\n   *\n   * @param  {any}     node      - The node's key.\n   * @param  {boolean} selfLoops - Count self-loops?\n   * @return {number}            - The node's out degree.\n   *\n   * @throws {Error} - Will throw if the selfLoops arg is not boolean.\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegree(node, selfLoops = true) {\n    if (typeof selfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(`Graph.outDegree: Expecting a boolean but got \"${selfLoops}\" for the second parameter (allowing self-loops to be counted).`);\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(`Graph.outDegree: could not find the \"${node}\" node in the graph.`);\n\n    if (this.type === 'undirected')\n      return 0;\n\n    const loops = selfLoops ? nodeData.directedSelfLoops : 0;\n\n    return nodeData.outDegree + loops;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node      - The node's key.\n   * @param  {boolean} selfLoops - Count self-loops?\n   * @return {number}            - The node's directed degree.\n   *\n   * @throws {Error} - Will throw if the selfLoops arg is not boolean.\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegree(node, selfLoops = true) {\n    if (typeof selfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(`Graph.directedDegree: Expecting a boolean but got \"${selfLoops}\" for the second parameter (allowing self-loops to be counted).`);\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(`Graph.directedDegree: could not find the \"${node}\" node in the graph.`);\n\n    if (this.type === 'undirected')\n      return 0;\n\n    const loops = selfLoops ? nodeData.directedSelfLoops : 0;\n\n    const inDegree = nodeData.inDegree + loops;\n    const outDegree = nodeData.outDegree + loops;\n\n    return inDegree + outDegree;\n  }\n\n  /**\n   * Method returning the given node's undirected degree.\n   *\n   * @param  {any}     node      - The node's key.\n   * @param  {boolean} selfLoops - Count self-loops?\n   * @return {number}            - The node's undirected degree.\n   *\n   * @throws {Error} - Will throw if the selfLoops arg is not boolean.\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegree(node, selfLoops = true) {\n    if (typeof selfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(`Graph.undirectedDegree: Expecting a boolean but got \"${selfLoops}\" for the second parameter (allowing self-loops to be counted).`);\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(`Graph.undirectedDegree: could not find the \"${node}\" node in the graph.`);\n\n    if (this.type === 'directed')\n      return 0;\n\n    const loops = selfLoops ? nodeData.undirectedSelfLoops : 0;\n\n    return nodeData.undirectedDegree + loops * 2;\n  }\n\n  /**\n   * Method returning the given node's degree.\n   *\n   * @param  {any}     node      - The node's key.\n   * @param  {boolean} selfLoops - Count self-loops?\n   * @return {number}            - The node's degree.\n   *\n   * @throws {Error} - Will throw if the selfLoops arg is not boolean.\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degree(node, selfLoops = true) {\n    if (typeof selfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(`Graph.degree: Expecting a boolean but got \"${selfLoops}\" for the second parameter (allowing self-loops to be counted).`);\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(`Graph.degree: could not find the \"${node}\" node in the graph.`);\n\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      if (selfLoops)\n        loops = nodeData.undirectedSelfLoops;\n\n      degree += nodeData.undirectedDegree + loops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      if (selfLoops)\n        loops = nodeData.directedSelfLoops;\n\n      degree += nodeData.inDegree + nodeData.outDegree + loops * 2;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given edge's source.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's source.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  source(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.source: could not find the \"${edge}\" edge in the graph.`);\n\n    return data.source.key;\n  }\n\n  /**\n   * Method returning the given edge's target.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's target.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  target(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.target: could not find the \"${edge}\" edge in the graph.`);\n\n    return data.target.key;\n  }\n\n  /**\n   * Method returning the given edge's extremities.\n   *\n   * @param  {any}   edge - The edge's key.\n   * @return {array}      - The edge's extremities.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  extremities(edge) {\n    edge = '' + edge;\n\n    const edgeData = this._edges.get(edge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(`Graph.extremities: could not find the \"${edge}\" edge in the graph.`);\n\n    return [\n      edgeData.source.key,\n      edgeData.target.key\n    ];\n  }\n\n  /**\n   * Given a node & an edge, returns the other extremity of the edge.\n   *\n   * @param  {any}   node - The node's key.\n   * @param  {any}   edge - The edge's key.\n   * @return {any}        - The related node.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph or if the\n   *                   edge & node are not related.\n   */\n  opposite(node, edge) {\n    node = '' + node;\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.opposite: could not find the \"${edge}\" edge in the graph.`);\n\n    const source = data.source.key,\n          target = data.target.key;\n\n    if (node !== source && node !== target)\n      throw new NotFoundGraphError(`Graph.opposite: the \"${node}\" node is not attached to the \"${edge}\" edge (${source}, ${target}).`);\n\n    return node === source ? target : source;\n  }\n\n  /**\n   * Returns whether the given edge has the given node as extremity.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @param  {any}     node - The node's key.\n   * @return {boolean}      - The related node.\n   *\n   * @throws {Error} - Will throw if either the node or the edge isn't in the graph.\n   */\n  hasExtremity(edge, node) {\n    edge = '' + edge;\n    node = '' + node;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.hasExtremity: could not find the \"${edge}\" edge in the graph.`);\n\n    return (\n      data.source.key === node ||\n      data.target.key === node\n    );\n  }\n\n  /**\n   * Method returning whether the given edge is undirected.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isUndirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.isUndirected: could not find the \"${edge}\" edge in the graph.`);\n\n    return data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is directed.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isDirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.isDirected: could not find the \"${edge}\" edge in the graph.`);\n\n    return !data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is a self loop.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isSelfLoop(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.isSelfLoop: could not find the \"${edge}\" edge in the graph.`);\n\n    return data.source === data.target;\n  }\n\n  /**\n   * Method returning whether the given edge has a generated key.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  hasGeneratedKey(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.hasGeneratedKey: could not find the \"${edge}\" edge in the graph.`);\n\n    return data.generatedKey;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Mutation\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to add a node to the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   *\n   * @throws {Error} - Will throw if the given node already exist.\n   * @throws {Error} - Will throw if the given attributes are not an object.\n   */\n  addNode(node, attributes) {\n    const nodeData = addNode(this, node, attributes);\n\n    return nodeData.key;\n  }\n\n  /**\n   * Method used to merge a node into the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   */\n  mergeNode(node, attributes) {\n    if (attributes && !isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(`Graph.mergeNode: invalid attributes. Expecting an object but got \"${attributes}\"`);\n\n    // String coercion\n    node = '' + node;\n    attributes = attributes || {};\n\n    // If the node already exists, we merge the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (attributes) {\n        assign(data.attributes, attributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'merge',\n          key: node,\n          attributes: data.attributes,\n          data: attributes\n        });\n      }\n      return node;\n    }\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return node;\n  }\n\n  /**\n   * Method used to add a node if it does not exist in the graph or else to\n   * update its attributes using a function.\n   *\n   * @param  {any}      node      - The node.\n   * @param  {function} [updater] - Optional updater function.\n   * @return {any}                - The node.\n   */\n  updateNode(node, updater) {\n    if (updater && typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(`Graph.updateNode: invalid updater function. Expecting a function but got \"${updater}\"`);\n\n    // String coercion\n    node = '' + node;\n\n    // If the node already exists, we update the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (updater) {\n        const oldAttributes = data.attributes;\n        data.attributes = updater(oldAttributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'replace',\n          key: node,\n          attributes: data.attributes\n        });\n      }\n      return node;\n    }\n\n    const attributes = updater ? updater({}) : {};\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return node;\n  }\n\n  /**\n   * Method used to drop a single node & all its attached edges from the graph.\n   *\n   * @param  {any}    node - The node.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node doesn't exist.\n   */\n  dropNode(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(`Graph.dropNode: could not find the \"${node}\" node in the graph.`);\n\n    // Removing attached edges\n    // TODO: we could do faster\n    this.forEachEdge(node, edge => {\n      this.dropEdge(edge);\n    });\n\n    // Dropping the node from the register\n    this._nodes.delete(node);\n\n    // Emitting\n    this.emit('nodeDropped', {\n      key: node,\n      attributes: nodeData.attributes\n    });\n  }\n\n  /**\n   * Method used to drop a single edge from the graph.\n   *\n   * Arity 1:\n   * @param  {any}    edge - The edge.\n   *\n   * Arity 2:\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropEdge(edge) {\n    let edgeData;\n\n    if (arguments.length > 1) {\n      const source = '' + arguments[0],\n            target = '' + arguments[1];\n\n      edgeData = getMatchingEdge(this, source, target, this.type);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(`Graph.dropEdge: could not find the \"${source}\" -> \"${target}\" edge in the graph.`);\n    }\n    else {\n      edge = '' + edge;\n\n      edgeData = this._edges.get(edge);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(`Graph.dropEdge: could not find the \"${edge}\" edge in the graph.`);\n    }\n\n    // Dropping the edge from the register\n    this._edges.delete(edgeData.key);\n\n    // Updating related degrees\n    const {\n      source: sourceData,\n      target: targetData,\n      attributes\n    } = edgeData;\n\n    const undirected = edgeData.undirected;\n\n    if (sourceData === targetData) {\n      if (undirected) {\n        sourceData.undirectedSelfLoops--;\n        this._undirectedSelfLoopCount--;\n      }\n      else {\n        sourceData.directedSelfLoops--;\n        this._directedSelfLoopCount--;\n      }\n    }\n    else {\n      if (undirected) {\n        sourceData.undirectedDegree--;\n        targetData.undirectedDegree--;\n      }\n      else {\n        sourceData.outDegree--;\n        targetData.inDegree--;\n      }\n    }\n\n    // Clearing index\n    clearEdgeFromStructureIndex(this, undirected, edgeData);\n\n    if (undirected)\n      this._undirectedSize--;\n    else\n      this._directedSize--;\n\n    // Emitting\n    this.emit('edgeDropped', {\n      key: edge,\n      attributes,\n      source: sourceData.key,\n      target: targetData.key,\n      undirected\n    });\n\n    return this;\n  }\n\n  /**\n   * Method used to remove every edge & every node from the graph.\n   *\n   * @return {Graph}\n   */\n  clear() {\n\n    // Clearing edges\n    this._edges.clear();\n\n    // Clearing nodes\n    this._nodes.clear();\n\n    // Emitting\n    this.emit('cleared');\n  }\n\n  /**\n   * Method used to remove every edge from the graph.\n   *\n   * @return {Graph}\n   */\n  clearEdges() {\n\n    // Clearing edges\n    this._edges.clear();\n\n    // Clearing indices\n    this.clearIndex();\n\n    // Emitting\n    this.emit('edgesCleared');\n  }\n\n  /**---------------------------------------------------------------------------\n   * Attributes-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning the desired graph's attribute.\n   *\n   * @param  {string} name - Name of the attribute.\n   * @return {any}\n   */\n  getAttribute(name) {\n    return this._attributes[name];\n  }\n\n  /**\n   * Method returning the graph's attributes.\n   *\n   * @return {object}\n   */\n  getAttributes() {\n    return this._attributes;\n  }\n\n  /**\n   * Method returning whether the graph has the desired attribute.\n   *\n   * @param  {string}  name - Name of the attribute.\n   * @return {boolean}\n   */\n  hasAttribute(name) {\n    return this._attributes.hasOwnProperty(name);\n  }\n\n  /**\n   * Method setting a value for the desired graph's attribute.\n   *\n   * @param  {string}  name  - Name of the attribute.\n   * @param  {any}     value - Value for the attribute.\n   * @return {Graph}\n   */\n  setAttribute(name, value) {\n    this._attributes[name] = value;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method using a function to update the desired graph's attribute's value.\n   *\n   * @param  {string}   name    - Name of the attribute.\n   * @param  {function} updater - Function use to update the attribute's value.\n   * @return {Graph}\n   */\n  updateAttribute(name, updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.updateAttribute: updater should be a function.');\n\n    const value = this._attributes[name];\n\n    this._attributes[name] = updater(value);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method removing the desired graph's attribute.\n   *\n   * @param  {string} name  - Name of the attribute.\n   * @return {Graph}\n   */\n  removeAttribute(name) {\n    delete this._attributes[name];\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'remove',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method replacing the graph's attributes.\n   *\n   * @param  {object} attributes - New attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  replaceAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError('Graph.replaceAttributes: provided attributes are not a plain object.');\n\n    this._attributes = attributes;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'replace',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method merging the graph's attributes.\n   *\n   * @param  {object} attributes - Attributes to merge.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  mergeAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError('Graph.mergeAttributes: provided attributes are not a plain object.');\n\n    assign(this._attributes, attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'merge',\n      attributes: this._attributes,\n      data: attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method returning the desired attribute for the given node.\n   *\n   * @param  {any}    node - Target node.\n   * @param  {string} name - Name of the attribute to get.\n   * @return {any}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  getNodeAttribute(node, name) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.getNodeAttribute: could not find the \"${node}\" node in the graph.`);\n\n    return data.attributes[name];\n  }\n\n  /**\n   * Method returning the attributes for the given node.\n   *\n   * @param  {any}    node - Target node.\n   * @return {object}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  getNodeAttributes(node) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.getNodeAttributes: could not find the \"${node}\" node in the graph.`);\n\n    return data.attributes;\n  }\n\n  /**\n   * Method checking whether the given attribute exists for the given node.\n   *\n   * @param  {any}    node - Target node.\n   * @param  {string} name - Name of the attribute to check.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  hasNodeAttribute(node, name) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.hasNodeAttribute: could not find the \"${node}\" node in the graph.`);\n\n    return data.attributes.hasOwnProperty(name);\n  }\n\n  /**\n   * Method checking setting the desired attribute for the given node.\n   *\n   * @param  {any}    node  - Target node.\n   * @param  {string} name  - Name of the attribute to set.\n   * @param  {any}    value - Value for the attribute.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if less than 3 arguments are passed.\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  setNodeAttribute(node, name, value) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.setNodeAttribute: could not find the \"${node}\" node in the graph.`);\n\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError('Graph.setNodeAttribute: not enough arguments. Either you forgot to pass the attribute\\'s name or value, or you meant to use #.replaceNodeAttributes / #.mergeNodeAttributes instead.');\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method checking setting the desired attribute for the given node.\n   *\n   * @param  {any}      node    - Target node.\n   * @param  {string}   name    - Name of the attribute to set.\n   * @param  {function} updater - Function that will update the attribute.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if less than 3 arguments are passed.\n   * @throws {Error} - Will throw if updater is not a function.\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  updateNodeAttribute(node, name, updater) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.updateNodeAttribute: could not find the \"${node}\" node in the graph.`);\n\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError('Graph.updateNodeAttribute: not enough arguments. Either you forgot to pass the attribute\\'s name or updater, or you meant to use #.replaceNodeAttributes / #.mergeNodeAttributes instead.');\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.updateAttribute: updater should be a function.');\n\n    const attributes = data.attributes;\n    const value = updater(attributes[name]);\n\n    attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method removing the desired attribute for the given node.\n   *\n   * @param  {any}    node  - Target node.\n   * @param  {string} name  - Name of the attribute to remove.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  removeNodeAttribute(node, name) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.hasNodeAttribute: could not find the \"${node}\" node in the graph.`);\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method completely replacing the attributes of the given node.\n   *\n   * @param  {any}    node       - Target node.\n   * @param  {object} attributes - New attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   * @throws {Error} - Will throw if the given attributes is not a plain object.\n   */\n  replaceNodeAttributes(node, attributes) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.replaceNodeAttributes: could not find the \"${node}\" node in the graph.`);\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError('Graph.replaceNodeAttributes: provided attributes are not a plain object.');\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method merging the attributes of the given node with the provided ones.\n   *\n   * @param  {any}    node       - Target node.\n   * @param  {object} attributes - Attributes to merge.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   * @throws {Error} - Will throw if the given attributes is not a plain object.\n   */\n  mergeNodeAttributes(node, attributes) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.mergeNodeAttributes: could not find the \"${node}\" node in the graph.`);\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError('Graph.mergeNodeAttributes: provided attributes are not a plain object.');\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method used to update each node's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachNodeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.updateEachNodeAttributes: expecting an updater function.');\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError('Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}');\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while ((step = iterator.next(), step.done !== true)) {\n      nodeData = step.value;\n      nodeData.attributes = updater(nodeData.key, nodeData.attributes);\n    }\n\n    this.emit('eachNodeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**\n   * Method used to update each edge's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachEdgeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.updateEachEdgeAttributes: expecting an updater function.');\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError('Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}');\n\n    const iterator = this._edges.values();\n\n    let step, edgeData;\n\n    while ((step = iterator.next(), step.done !== true)) {\n      edgeData = step.value;\n      edgeData.attributes = updater(edgeData.key, edgeData.attributes);\n    }\n\n    this.emit('eachEdgeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Iteration-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method iterating over the graph's adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEach(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.forEach: expecting a callback.');\n\n    if (this.multi)\n      forEachAdjacencyMulti(false, this, callback);\n    else\n      forEachAdjacencySimple(false, this, callback);\n  }\n\n  /**\n   * Method iterating over the graph's adjacency using the given callback until\n   * it returns a truthy value to stop iteration.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEachUntil(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.forEach: expecting a callback.');\n\n    if (this.multi)\n      forEachAdjacencyMulti(true, this, callback);\n    else\n      forEachAdjacencySimple(true, this, callback);\n  }\n\n  /**\n   * Method returning an iterator over the graph's adjacency.\n   *\n   * @return {Iterator}\n   */\n  adjacency() {\n    if (this.multi)\n      return createAdjacencyIteratorMulti(this);\n\n    return createAdjacencyIteratorSimple(this);\n  }\n\n  /**\n   * Method returning the list of the graph's nodes.\n   *\n   * @return {array} - The nodes.\n   */\n  nodes() {\n    if (typeof Array.from === 'function')\n      return Array.from(this._nodes.keys());\n\n    return take(this._nodes.keys(), this._nodes.size);\n  }\n\n  /**\n   * Method iterating over the graph's nodes using the given callback.\n   *\n   * @param  {function}  callback - Callback (key, attributes, index).\n   */\n  forEachNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.forEachNode: expecting a callback.');\n\n    this._nodes.forEach((data, key) => {\n      callback(key, data.attributes);\n    });\n  }\n\n  /**\n   * Method iterating over the graph's nodes using the given callback until\n   * it returns a truthy value to stop iteration.\n   *\n   * @param  {function}  callback - Callback (key, attributes, index).\n   */\n  forEachNodeUntil(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.forEachNode: expecting a callback.');\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData, shouldBreak;\n\n    while ((step = iterator.next(), step !== true)) {\n      nodeData = step.value;\n\n      shouldBreak = callback(nodeData.key, nodeData.attributes);\n\n      if (shouldBreak)\n        break;\n    }\n  }\n\n  /**\n   * Method returning an iterator over the graph's node entries.\n   *\n   * @return {Iterator}\n   */\n  nodeEntries() {\n    const iterator = this._nodes.values();\n\n    return new Iterator(() => {\n      const step = iterator.next();\n\n      if (step.done)\n        return step;\n\n      const data = step.value;\n\n      return {value: [data.key, data.attributes], done: false};\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Serialization\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method exporting the target node.\n   *\n   * @param  {any}   node - Target node.\n   * @return {array}      - The serialized node.\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  exportNode(node) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.exportNode: could not find the \"${node}\" node in the graph.`);\n\n    return serializeNode(node, data);\n  }\n\n  /**\n   * Method exporting the target edge.\n   *\n   * @param  {any}   edge - Target edge.\n   * @return {array}      - The serialized edge.\n   *\n   * @throws {Error} - Will throw if the edge is not found.\n   */\n  exportEdge(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(`Graph.exportEdge: could not find the \"${edge}\" edge in the graph.`);\n\n    return serializeEdge(edge, data);\n  }\n\n  /**\n   * Method used to export the whole graph.\n   *\n   * @return {object} - The serialized graph.\n   */\n  export() {\n\n    const nodes = new Array(this._nodes.size);\n\n    let i = 0;\n\n    this._nodes.forEach((data, key) => {\n      nodes[i++] = serializeNode(key, data);\n    });\n\n    const edges = new Array(this._edges.size);\n\n    i = 0;\n\n    this._edges.forEach((data, key) => {\n      edges[i++] = serializeEdge(key, data);\n    });\n\n    return {\n      attributes: this.getAttributes(),\n      nodes,\n      edges,\n      options: {\n        type: this.type,\n        multi: this.multi,\n        allowSelfLoops: this.allowSelfLoops\n      }\n    };\n  }\n\n  /**\n   * Method used to import a serialized node.\n   *\n   * @param  {object} data   - The serialized node.\n   * @param  {boolean} merge - Whether to merge the given node.\n   * @return {Graph}         - Returns itself for chaining.\n   */\n  importNode(data, merge = false) {\n\n    // Validating\n    const error = validateSerializedNode(data);\n\n    if (error) {\n\n      if (error === 'not-object')\n        throw new InvalidArgumentsGraphError('Graph.importNode: invalid serialized node. A serialized node should be a plain object with at least a \"key\" property.');\n      if (error === 'no-key')\n        throw new InvalidArgumentsGraphError('Graph.importNode: no key provided.');\n      if (error === 'invalid-attributes')\n        throw new InvalidArgumentsGraphError('Graph.importNode: invalid attributes. Attributes should be a plain object, null or omitted.');\n    }\n\n    // Adding the node\n    const {key, attributes = {}} = data;\n\n    if (merge)\n      this.mergeNode(key, attributes);\n    else\n      this.addNode(key, attributes);\n\n    return this;\n  }\n\n  /**\n   * Method used to import a serialized edge.\n   *\n   * @param  {object}  data  - The serialized edge.\n   * @param  {boolean} merge - Whether to merge the given edge.\n   * @return {Graph}         - Returns itself for chaining.\n   */\n  importEdge(data, merge = false) {\n\n    // Validating\n    const error = validateSerializedEdge(data);\n\n    if (error) {\n\n      if (error === 'not-object')\n        throw new InvalidArgumentsGraphError('Graph.importEdge: invalid serialized edge. A serialized edge should be a plain object with at least a \"source\" & \"target\" property.');\n      if (error === 'no-source')\n        throw new InvalidArgumentsGraphError('Graph.importEdge: missing souce.');\n      if (error === 'no-target')\n        throw new InvalidArgumentsGraphError('Graph.importEdge: missing target.');\n      if (error === 'invalid-attributes')\n        throw new InvalidArgumentsGraphError('Graph.importEdge: invalid attributes. Attributes should be a plain object, null or omitted.');\n      if (error === 'invalid-undirected')\n        throw new InvalidArgumentsGraphError('Graph.importEdge: invalid undirected. Undirected should be boolean or omitted.');\n    }\n\n    // Adding the edge\n    const {\n      source,\n      target,\n      attributes = {},\n      undirected = false\n    } = data;\n\n    let method;\n\n    if ('key' in data) {\n      method = merge ?\n        (undirected ? this.mergeUndirectedEdgeWithKey : this.mergeDirectedEdgeWithKey) :\n        (undirected ? this.addUndirectedEdgeWithKey : this.addDirectedEdgeWithKey);\n\n      method.call(\n        this,\n        data.key,\n        source,\n        target,\n        attributes\n      );\n    }\n    else {\n      method = merge ?\n        (undirected ? this.mergeUndirectedEdge : this.mergeDirectedEdge) :\n        (undirected ? this.addUndirectedEdge : this.addDirectedEdge);\n\n      method.call(\n        this,\n        source,\n        target,\n        attributes\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Method used to import a serialized graph.\n   *\n   * @param  {object|Graph} data  - The serialized graph.\n   * @param  {boolean}      merge - Whether to merge data.\n   * @return {Graph}              - Returns itself for chaining.\n   */\n  import(data, merge = false) {\n\n    // Importing a Graph instance\n    if (isGraph(data)) {\n\n      this.import(data.export(), merge);\n      return this;\n    }\n\n    // Importing a serialized graph\n    if (!isPlainObject(data))\n      throw new InvalidArgumentsGraphError('Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.');\n\n    if (data.attributes) {\n      if (!isPlainObject(data.attributes))\n        throw new InvalidArgumentsGraphError('Graph.import: invalid attributes. Expecting a plain object.');\n\n      if (merge)\n        this.mergeAttributes(data.attributes);\n      else\n        this.replaceAttributes(data.attributes);\n    }\n\n    let i, l, list;\n\n    if (data.nodes) {\n      list = data.nodes;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError('Graph.import: invalid nodes. Expecting an array.');\n\n\n      for (i = 0, l = list.length; i < l; i++)\n        this.importNode(list[i], merge);\n    }\n\n    if (data.edges) {\n      list = data.edges;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError('Graph.import: invalid edges. Expecting an array.');\n\n      for (i = 0, l = list.length; i < l; i++)\n        this.importEdge(list[i], merge);\n    }\n\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Utils\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning a null copy of the graph, i.e. a graph without nodes\n   * & edges but with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The null copy.\n   */\n  nullCopy(options) {\n    return new Graph(assign({}, this._options, options));\n  }\n\n  /**\n   * Method returning an empty copy of the graph, i.e. a graph without edges but\n   * with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The empty copy.\n   */\n  emptyCopy(options) {\n    const graph = this.nullCopy(options);\n\n    this._nodes.forEach((nodeData, key) => {\n      const attributes = assign({}, nodeData.attributes);\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      nodeData = new graph.NodeDataClass(key, attributes);\n      graph._nodes.set(key, nodeData);\n    });\n\n    return graph;\n  }\n\n  /**\n   * Method returning an exact copy of the graph.\n   *\n   * @return {Graph} - The copy.\n   */\n  copy() {\n    const graph = new Graph(this._options);\n    graph.import(this);\n\n    return graph;\n  }\n\n  /**\n   * Method upgrading the graph to a mixed one.\n   *\n   * @return {Graph} - The copy.\n   */\n  upgradeToMixed() {\n    if (this.type === 'mixed')\n      return this;\n\n    // Upgrading node data:\n    // NOTE: maybe this could lead to some de-optimization by usual\n    // JavaScript engines but I cannot be sure of it. Another solution\n    // would be to reinstantiate the classes but this surely has a performance\n    // and memory impact.\n    this._nodes.forEach(data => (data.upgradeToMixed()));\n\n    // Mutating the options & the instance\n    this._options.type = 'mixed';\n    readOnlyProperty(this, 'type', this._options.type);\n    privateProperty(this, 'NodeDataClass', MixedNodeData);\n\n    return this;\n  }\n\n  /**\n   * Method upgrading the graph to a multi one.\n   *\n   * @return {Graph} - The copy.\n   */\n  upgradeToMulti() {\n    if (this.multi)\n      return this;\n\n    // Mutating the options & the instance\n    this._options.multi = true;\n    readOnlyProperty(this, 'multi', true);\n\n    // Upgrading indices\n    upgradeStructureIndexToMulti(this);\n\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Indexes-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to clear the desired index to clear memory.\n   *\n   * @return {Graph}       - Returns itself for chaining.\n   */\n  clearIndex() {\n    clearStructureIndex(this);\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Known methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used by JavaScript to perform JSON serialization.\n   *\n   * @return {object} - The serialized graph.\n   */\n  toJSON() {\n    return this.export();\n  }\n\n  /**\n   * Method returning [object Graph].\n   */\n  toString() {\n    return '[object Graph]';\n  }\n\n  /**\n   * Method used internally by node's console to display a custom object.\n   *\n   * @return {object} - Formatted object representation of the graph.\n   */\n  inspect() {\n    const nodes = {};\n    this._nodes.forEach((data, key) => {\n      nodes[key] = data.attributes;\n    });\n\n    const edges = {},\n          multiIndex = {};\n\n    this._edges.forEach((data, key) => {\n      const direction = data.undirected ? '--' : '->';\n\n      let label = '';\n\n      const desc = `(${data.source.key})${direction}(${data.target.key})`;\n\n      if (!data.generatedKey) {\n        label += `[${key}]: `;\n      }\n      else if (this.multi) {\n        if (typeof multiIndex[desc] === 'undefined') {\n          multiIndex[desc] = 0;\n        }\n        else {\n          multiIndex[desc]++;\n        }\n\n        label += `${multiIndex[desc]}. `;\n      }\n\n      label += desc;\n\n      edges[label] = data.attributes;\n    });\n\n    const dummy = {};\n\n    for (const k in this) {\n      if (this.hasOwnProperty(k) &&\n          !EMITTER_PROPS.has(k) &&\n          typeof this[k] !== 'function')\n        dummy[k] = this[k];\n    }\n\n    dummy.attributes = this._attributes;\n    dummy.nodes = nodes;\n    dummy.edges = edges;\n\n    privateProperty(dummy, 'constructor', this.constructor);\n\n    return dummy;\n  }\n}\n\n/**\n * Attaching custom inspect method for node >= 10.\n */\nif (typeof Symbol !== 'undefined')\n  Graph.prototype[Symbol.for('nodejs.util.inspect.custom')] = Graph.prototype.inspect;\n\n/**\n * Attaching methods to the prototype.\n *\n * Here, we are attaching a wide variety of methods to the Graph class'\n * prototype when those are very numerous and when their creation is\n * abstracted.\n */\n\n/**\n * Related to edge addition.\n */\nEDGE_ADD_METHODS.forEach(method => {\n  ['add', 'merge', 'update'].forEach(verb => {\n    const name = method.name(verb),\n          fn = verb === 'add' ? addEdge : mergeEdge;\n\n    if (method.generateKey) {\n      Graph.prototype[name] = function(source, target, attributes) {\n        return fn(\n          this,\n          name,\n          true,\n          (method.type || this.type) === 'undirected',\n          null,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    }\n    else {\n      Graph.prototype[name] = function(edge, source, target, attributes) {\n        return fn(\n          this,\n          name,\n          false,\n          (method.type || this.type) === 'undirected',\n          edge,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    }\n  });\n});\n\n/**\n * Self iterator.\n */\nif (typeof Symbol !== 'undefined')\n  Graph.prototype[Symbol.iterator] = Graph.prototype.adjacency;\n\n/**\n * Attributes-related.\n */\nattachAttributesMethods(Graph);\n\n/**\n * Edge iteration-related.\n */\nattachEdgeIterationMethods(Graph);\n\n/**\n * Neighbor iteration-related.\n */\nattachNeighborIterationMethods(Graph);\n","/**\n * Graphology Helper Classes\n * ==========================\n *\n * Building some higher-order classes instantiating the graph with\n * predefinite options.\n */\nimport {assign} from './utils';\nimport Graph from './graph';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\n/**\n * Alternative constructors.\n */\nclass DirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError('DirectedGraph.from: inconsistent indication that the graph should be multi in given options!');\n\n    if (finalOptions.type !== 'directed')\n    throw new InvalidArgumentsGraphError('DirectedGraph.from: inconsistent \"' + finalOptions.type + '\" type in given options!');\n\n    super(finalOptions);\n  }\n}\nclass UndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError('UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!');\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError('UndirectedGraph.from: inconsistent \"' + finalOptions.type + '\" type in given options!');\n\n    super(finalOptions);\n  }\n}\nclass MultiGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError('MultiGraph.from: inconsistent indication that the graph should be simple in given options!');\n\n    super(finalOptions);\n  }\n}\nclass MultiDirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError('MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!');\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError('MultiDirectedGraph.from: inconsistent \"' + finalOptions.type + '\" type in given options!');\n\n    super(finalOptions);\n  }\n}\nclass MultiUndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError('MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!');\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError('MultiUndirectedGraph.from: inconsistent \"' + finalOptions.type + '\" type in given options!');\n\n    super(finalOptions);\n  }\n}\n\n/**\n * Attaching static #.from method to each of the constructors.\n */\nfunction attachStaticFromMethod(Class) {\n\n  /**\n   * Builds a graph from serialized data or another graph's data.\n   *\n   * @param  {Graph|SerializedGraph} data      - Hydratation data.\n   * @param  {object}                [options] - Options.\n   * @return {Class}\n   */\n  Class.from = function(data, options) {\n\n    // Merging given options with serialized ones\n    const finalOptions = assign({}, data.options, options);\n\n    const instance = new Class(finalOptions);\n    instance.import(data);\n\n    return instance;\n  };\n}\n\nattachStaticFromMethod(Graph);\nattachStaticFromMethod(DirectedGraph);\nattachStaticFromMethod(UndirectedGraph);\nattachStaticFromMethod(MultiGraph);\nattachStaticFromMethod(MultiDirectedGraph);\nattachStaticFromMethod(MultiUndirectedGraph);\n\nGraph.Graph = Graph;\nGraph.DirectedGraph = DirectedGraph;\nGraph.UndirectedGraph = UndirectedGraph;\nGraph.MultiGraph = MultiGraph;\nGraph.MultiDirectedGraph = MultiDirectedGraph;\nGraph.MultiUndirectedGraph = MultiUndirectedGraph;\n\nGraph.InvalidArgumentsGraphError = InvalidArgumentsGraphError;\nGraph.NotFoundGraphError = NotFoundGraphError;\nGraph.UsageGraphError = UsageGraphError;\n\nexport {\n  Graph,\n  DirectedGraph,\n  UndirectedGraph,\n  MultiGraph,\n  MultiDirectedGraph,\n  MultiUndirectedGraph\n};\n"],"names":["assign","target","arguments","i","l","length","k","getMatchingEdge","graph","source","type","sourceData","_nodes","get","edge","out","undirected","isGraph","value","_typeof","addUndirectedEdgeWithKey","dropNode","isPlainObject","constructor","Object","isEmpty","o","privateProperty","name","defineProperty","enumerable","configurable","writable","readOnlyProperty","descriptor","validateHints","hints","attributes","Array","isArray","ReflectOwnKeys","R","Reflect","ReflectApply","apply","receiver","args","Function","prototype","call","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","concat","NumberIsNaN","Number","isNaN","EventEmitter","init","this","emitter","Promise","resolve","reject","eventListener","undefined","errorListener","removeListener","slice","err","once","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","TypeError","_getMaxListeners","that","_addListener","prepend","m","events","existing","warning","create","newListener","emit","unshift","push","warned","w","Error","String","count","console","warn","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","bind","_listeners","unwrap","evlistener","arr","ret","unwrapListeners","arrayClone","listenerCount","n","copy","Iterator","next","done","set","arg","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","error","er","message","context","handler","len","listeners","addListener","on","prependListener","prependOnceListener","list","position","originalListener","shift","index","pop","spliceOne","off","removeAllListeners","key","keys","rawListeners","eventNames","step","_next","Symbol","iterator","of","empty","is","Infinity","array","GraphError","data","InvalidArgumentsGraphError","captureStackTrace","NotFoundGraphError","UsageGraphError","MixedNodeData","inDegree","outDegree","undirectedDegree","directedSelfLoops","undirectedSelfLoops","DirectedNodeData","UndirectedNodeData","EdgeData","generatedKey","updateStructureIndex","edgeData","targetData","adj","container","outKey","inKey","multi","Set","add","clearEdgeFromStructureIndex","sourceIndex","size","upgradeToMixed","ATTRIBUTES_METHODS","element","attacher","Class","method","_edges","hasOwnProperty","updater","current","iterators","iterate","EDGES_ITERATION","direction","collectSimple","edges","object","collectMulti","forEach","forEachSimple","callback","avoid","forEachMulti","forEachSimpleUntil","forEachMultiUntil","values","createIterator","inner","collectForKeySimple","collectForKeyMulti","edgesData","forEachForKeySimple","forEachForKeyMulti","forEachForKeySimpleUntil","forEachForKeyMultiUntil","createIteratorForKey","v","createEdgeArray","from","take","undirectedSize","directedSize","mask","forEachEdge","shouldFilter","forEachEdgeUntil","createEdgeIterator","createEdgeArrayForNode","nodeData","fn","splice","lastIndexOf","forEachEdgeForNode","forEachEdgeForNodeUntil","createEdgeIteratorForNode","chain","createEdgeArrayForPath","forEachEdgeForPath","forEachEdgeForPathUntil","createEdgeIteratorForPath","NEIGHBORS_ITERATION","merge","neighbors","neighbor","createNeighborArrayForNode","forEachInObject","neighborData","forEachInObjectOnce","visited","has","forEachInObjectUntil","forEachInObjectOnceUntil","createObjectIterator","createDedupedObjectIterator","nodeHasNeighbor","node","attachForEachNeighbor","description","forEachName","toUpperCase","forEachNeighborForNode","attachForEachNeighborUntil","forEachUntilName","forEachNeighborForNodeUntil","attachNeighborIteratorCreator","iteratorName","createNeighborIterator","forEachAdjacencySimple","breakable","shouldBreak","forEachAdjacencyMulti","containerStep","serializeNode","serialized","serializeEdge","validateSerializedNode","validateSerializedEdge","TYPES","EMITTER_PROPS","DEFAULTS","allowSelfLoops","edgeKeyGenerator","unsafeAddNode","NodeDataClass","addEdge","mustGenerateKey","eventData","_edgeKeyGenerator","_undirectedSelfLoopCount","_directedSelfLoopCount","_undirectedSize","_directedSize","mergeEdge","asUpdater","alreadyExistingEdgeData","oldAttributes","Graph","options","Map","prop","_this","_options","hasNode","hasDirectedEdge","hasUndirectedEdge","hasEdge","directedEdge","undirectedEdge","selfLoops","loops","directedDegree","degree","extremities","opposite","hasExtremity","isUndirected","isDirected","isSelfLoop","hasGeneratedKey","addNode","mergeNode","updateNode","_this2","dropEdge","clear","clearEdges","clearIndex","getAttribute","_attributes","getAttributes","hasAttribute","setAttribute","updateAttribute","removeAttribute","replaceAttributes","mergeAttributes","getNodeAttribute","getNodeAttributes","hasNodeAttribute","setNodeAttribute","updateNodeAttribute","removeNodeAttribute","replaceNodeAttributes","mergeNodeAttributes","updateEachNodeAttributes","updateEachEdgeAttributes","forEachUntil","adjacency","offset","createAdjacencyIteratorSimple","nodes","forEachNode","forEachNodeUntil","nodeEntries","exportNode","exportEdge","importNode","importEdge","mergeUndirectedEdgeWithKey","mergeDirectedEdgeWithKey","addDirectedEdgeWithKey","mergeUndirectedEdge","mergeDirectedEdge","addUndirectedEdge","addDirectedEdge","nullCopy","emptyCopy","upgradeToMulti","toJSON","toString","inspect","multiIndex","label","desc","_this3","dummy","verb","generateKey","attachAttributesMethods","attachEdgeArrayCreator","attachForEachEdge","attachForEachEdgeUntil","originalName","attachEdgeIteratorCreator","attachEdgeIterationMethods","node1","node2","attachNeighborArrayCreator","attachNeighborIterationMethods","DirectedGraph","finalOptions","_Graph","UndirectedGraph","_Graph2","MultiGraph","_Graph3","MultiDirectedGraph","_Graph4","MultiUndirectedGraph","_Graph5","attachStaticFromMethod","instance"],"mappings":"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"}